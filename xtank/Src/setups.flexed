/* A lexical scanner generated by flex */

/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <osfcn.h>

/* use prototypes in function declarations */
#define YY_USE_PROTOS

/* the "const" storage-class-modifier is valid */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
#else
#include <stdlib.h>
#endif	/* __GNUC__ */

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#define const
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
/* we can't get here if it's an ANSI C compiler, or a C++ compiler,
 * so it's got to be a K&R compiler, and therefore there's no standard
 * place from which to include these definitions
 */
char *malloc();
int free();
int read();
#endif


/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* returned upon end-of-file */
#define YY_END_TOK 0

/* copy whatever the last rule matched to the standard output */

/* cast to (char *) is because for 8-bit chars, yytext is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yytext, yyleng, 1, yyout )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );
#define YY_NULL 0

/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 * 	if ( something_happens )
 *		YY_FATAL_ERROR( "oops, the something happened" );
 *	else
 *		everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, stderr ); \
		(void) putc( '\n', stderr ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1

/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* special action meaning "start processing a new file" */
#define YY_NEW_FILE \
	do \
		{ \
		yy_init_buffer( yy_current_buffer, yyin ); \
		yy_load_buffer_state(); \
		} \
	while ( 0 )

/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 

/* code executed at the end of each rule */
#define YY_BREAK break;

#define YY_END_OF_BUFFER_CHAR 0

#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) /* size of default input buffer */
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;

#define YY_CHAR char
# line 1 "setups.l"
#define INITIAL 0
# line 2 "setups.l"

#include <stdio.h>
#include <string.h>

#include "xtank.h"
#include "vehicle.h"
#include "setup.h"
#include "globals.h"
#include "team.h"
/* For "UNDEFINED" */
#include "interface.h"
#include "terminal.h"

#define BUFLEN 256
#define SEP ",\t"

extern char *games_entries[];
extern Settings settings;
extern int num_terminals;
extern Terminal *terminal[];

char *yval(), *strtoke();
void cv_str(), cv_kw2i(), cv_bool(), cv_int(), cv_flt(), cv_maze();

# line 34 "setups.l"

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yytext
 */
#define YY_DO_BEFORE_ACTION \
	yytext = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yytext */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext )


struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_CHAR *yy_ch_buf;		/* input buffer */
    YY_CHAR *yy_buf_pos;	/* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters*/
    int yy_buf_size;	

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;		/* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

static YY_BUFFER_STATE yy_current_buffer;

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed */
static YY_CHAR yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */



#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

extern YY_CHAR *yytext;
extern int yyleng;
extern FILE *yyin, *yyout;

YY_CHAR *yytext;
int yyleng;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

#define YY_END_OF_BUFFER 33
typedef int yy_state_type;
static const short int yy_accept[415] =
    {   0,
       31,   31,   33,   31,    1,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   30,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,    4,   31,    3,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   29,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,    8,   31,   31,   31,   31,   31,   28,   31,    9,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   11,   31,   15,   16,   31,   31,   31,   31,
       31,    7,    6,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   27,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   17,   31,    2,   31,   10,   31,   31,   31,   31,
       31,   12,   31,   31,   31,   31,   31,   31,   21,   31,
       31,   31,   31,   31,   31,   31,   31,   20,   31,   31,
       31,   31,   31,   22,   31,   31,   31,   31,   31,    5,
       31,   31,   26,   24,   31,   18,   31,   31,   31,   31,

       23,   31,   31,   31,   14,   25,   31,   31,   31,   31,
       31,   19,   13,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    6,    1,
        1,    1,    1,    1,    1,    7,    1,    8,    9,   10,
       11,   12,   10,   13,   10,   10,   10,   14,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,    1,   19,
       20,    1,    1,    1,    1,    1,   21,   22,   23,   24,
        1,   25,   26,   27,    1,   28,   29,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,    1,   39,   40,   41,   42,
       43,   44,    1,   45,   46,   47,   48,    1,   49,   50,
       51,   52,    1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[53] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static const short int yy_base[422] =
    {   0,
        0,   26,  723,    0,  724,  717,  678,  677,  681,  670,
      687,  686,   26,    9,   29,   27,    0,    0,  677,  667,
        0,    0,  663,  671,   25,  671,  669,   12,  668,   18,
      661,  665,  655,  667,  661,   27,  671,  671,  656,  657,
      661,  656,  667,  654,  665,    6,  690,  652,  657,  659,
      650,  655,  684,  653,  652,    2,  644,  640,  649,  678,
      639,  644,  675,  631,  634,  633,  632,  642,  629,  633,
      630,  628,  627,    0,  622,  633,  628,  661,  660,  649,
      647,  647,  613,  629,  624,  627,  613,  610,  627,  606,
      607,  632,  620,  617,  601,  607,  607,  641,  598,  639,

      604,  602,    3,  600,  597,  606,  618,  615,   19,  590,
       22,  604,  600,  602,  591,  584,  625,  585,  623,  596,
      587,  579,  586,  576,  581,  586,  600,  604,  591,  574,
      601,  611,   75,  570,  565,  563,  565,  579,   31,  567,
       34,  571,  576,  560,  600,  556,  576,  597,  584,  558,
      553,  550,  562,  591,  590,  548,  547,   37,  559,  554,
       64,  724,  540,  558,  547,  548,  541,  581,   78,  540,
      579,   81,  535,  535,  565,  559,  573,  536,  551,  526,
      559,  538,  557,  523,  551,  534,  555,  520,   84,  514,
      545,   85,  515,  500,  499,  506,  523,  724,  491,  724,

      521,  513,   88,  481,  499,  481,  474,  473,   89,  496,
       93,  488,  458,  456,  470,  459,  487,   96,  444,  461,
      469,  434,  433,  417,  420,   99,  462,  100,  103,  104,
      427,  410,  407,  425,  414,  107,  112,  113,  116,  404,
      411,  414,  396,  724,  400,  401,  420,  375,  378,  408,
      382,  121,  390,  124,  132,  412,  382,  367,  371,  352,
      368,  398,  135,  140,  390,  143,  386,  357,  350,  344,
      367,  337,  368,  328,  355,  151,  325,  357,  327,  355,
      354,  724,  302,  314,  304,  332,  291,  724,  334,  724,
      333,  287,  292,  284,  280,  152,  270,  303,  299,  155,

      158,  270,  724,  274,  724,  724,  265,  260,  251,  159,
      246,  724,  724,  287,  276,  242,  238,  170,  245,  253,
      171,  178,  180,  247,  220,  206,  212,  193,  192,  208,
      192,  193,  201,  193,  203,  185,  195,  200,  182,  724,
      201,  150,  139,  130,  162,  162,  212,  126,  215,  216,
      227,  724,  228,  724,  230,  724,  242,  144,  136,  109,
      232,  724,  254,  101,  261,  273,  285,  297,  724,  308,
      319,  243,  255,  121,  331,  128,  113,  724,  342,  353,
      364,  375,  386,  724,  397,  409,  417,  263,  428,  724,
      274,  439,  724,  724,  450,  724,  461,  121,  472,  484,

      724,  495,  507,  509,  724,  724,  520,  531,  542,  116,
      553,  724,  724,  724,  566,  109,   95,   74,   24,    5,
        0
    } ;

static const short int yy_def[422] =
    {   0,
      415,  415,  414,  416,  414,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  417,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  417,  417,  416,  416,  416,  416,  416,  418,  416,
      419,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  414,  416,  416,  416,  416,  416,  418,  418,  416,
      419,  419,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  420,  416,
      416,  416,  416,  416,  416,  416,  416,  414,  416,  414,

      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  420,  420,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  421,  416,  416,  416,  416,
      416,  416,  416,  414,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  421,  421,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  414,  416,  416,  416,  416,  416,  414,  416,  414,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  414,  416,  414,  414,  416,  416,  416,  416,
      416,  414,  414,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  414,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  414,  416,  414,  416,  414,  416,  416,  416,  416,
      416,  414,  416,  416,  416,  416,  416,  416,  414,  416,
      416,  416,  416,  416,  416,  416,  416,  414,  416,  416,
      416,  416,  416,  414,  416,  416,  416,  416,  416,  414,
      416,  416,  414,  414,  416,  414,  416,  416,  416,  416,

      414,  416,  416,  416,  414,  414,  416,  416,  416,  416,
      416,  414,  414,    0,  414,  414,  414,  414,  414,  414,
      414
    } ;

static const short int yy_nxt[777] =
    {   0,
      262,  103,    5,  103,  133,  217,  133,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   74,
      139,   56,  139,  141,  171,  141,   84,    6,    5,   42,
       85,   39,  169,   43,  169,  172,   40,  172,  189,   41,
      189,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,    6,   19,   29,   31,   32,   33,   49,
       36,   53,   57,   54,   37,  192,   63,  192,   30,   38,
       50,   34,   64,   35,  168,   20,  133,  162,  133,  169,
      198,  169,  172,  200,  172,  218,  192,  218,  192,  230,
      236,  230,  236,  221,  238,  132,  238,  218,  244,  218,

      252,  254,  252,  254,  255,  230,  255,  230,  263,   21,
      263,  256,  256,  264,  238,  264,  238,  266,  413,  266,
      265,  265,  252,  405,  252,  254,  391,  254,  278,  278,
      390,  280,  280,  255,  388,  255,  263,  288,  263,  281,
      281,  264,  377,  264,  266,  374,  266,  289,  289,  373,
      291,  291,  301,  318,  301,  318,  322,  372,  322,  301,
      329,  301,  329,  364,  362,  323,  323,  323,  323,  323,
      323,  318,  338,  318,  338,  361,  360,  335,  335,  322,
      359,  322,  340,  358,  356,  339,  339,  323,  323,  323,
      323,  323,  323,  329,  349,  329,  349,  354,  353,  346,

      346,  338,  357,  338,  357,  352,  351,  355,  355,  355,
      355,  355,  355,  363,  350,  363,  349,  366,  349,  366,
      348,  347,  365,  365,  365,  365,  365,  365,  367,  368,
      367,  368,  369,  375,  345,  375,  370,  355,  355,  355,
      355,  355,  355,  357,  386,  357,  386,  344,  343,  371,
      371,  371,  371,  371,  371,  363,  387,  363,  387,  342,
      341,  376,  376,  378,  400,  337,  400,  379,  365,  365,
      365,  365,  365,  365,  366,  403,  366,  403,  336,  334,
      380,  380,  380,  380,  380,  380,  367,  333,  367,  332,
      331,  330,  381,  381,  381,  381,  381,  381,  368,  328,

      368,  327,  326,  325,  382,  382,  382,  382,  382,  382,
      369,  324,  321,  320,  319,  383,  383,  383,  383,  383,
      383,  384,  317,  316,  315,  385,  371,  371,  371,  371,
      371,  371,  375,  314,  375,  313,  312,  311,  389,  389,
      389,  389,  389,  389,  378,  310,  309,  308,  307,  392,
      392,  392,  392,  392,  392,  393,  306,  305,  304,  303,
      380,  380,  380,  380,  380,  380,  394,  302,  300,  299,
      395,  381,  381,  381,  381,  381,  381,  396,  298,  297,
      296,  295,  382,  382,  382,  382,  382,  382,  369,  294,
      293,  292,  290,  383,  383,  383,  383,  383,  383,  384,

      288,  287,  286,  285,  397,  397,  397,  397,  397,  397,
      386,  284,  386,  283,  282,  279,  398,  398,  387,  277,
      387,  276,  275,  274,  399,  399,  399,  399,  399,  399,
      401,  273,  272,  271,  402,  389,  389,  389,  389,  389,
      389,  378,  270,  269,  268,  267,  392,  392,  392,  392,
      392,  392,  394,  261,  260,  259,  258,  404,  404,  404,
      404,  404,  404,  384,  257,  253,  251,  250,  397,  397,
      397,  397,  397,  397,  406,  249,  248,  247,  407,  399,
      399,  399,  399,  399,  399,  400,  246,  400,  245,  244,
      243,  408,  408,  408,  408,  408,  408,  401,  242,  241,

      240,  239,  409,  409,  409,  409,  409,  409,  403,  237,
      403,  394,  235,  234,  410,  410,  404,  404,  404,  404,
      404,  404,  406,  233,  232,  231,  229,  411,  411,  411,
      411,  411,  411,  412,  228,  227,  226,  225,  408,  408,
      408,  408,  408,  408,  401,  224,  223,  222,  220,  409,
      409,  409,  409,  409,  409,  406,  219,  216,  215,  214,
      411,  411,  411,  411,  411,  411,    4,    4,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  202,
      201,  200,  199,  198,  197,  196,  195,  194,  193,  191,
      190,  188,  187,  186,  185,  184,  183,  182,  181,  180,

      179,  178,  177,  176,  175,  174,  173,  170,  167,  166,
      165,  164,  163,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  148,  147,  146,
      145,  144,  143,  142,  140,  138,  137,  136,  135,  134,
      131,  130,  129,  128,  127,  126,  125,  124,  123,  122,
      121,  120,  119,  118,  117,  116,  115,  114,  113,  112,
      111,  110,  109,  108,  107,  106,  105,  104,  102,  101,
      100,   99,   98,   97,   96,   95,   94,   93,   92,   91,
       90,   89,   88,   87,   86,   83,   82,   81,   80,   79,
       78,   77,   76,   75,   73,   72,   71,   70,   69,   68,

       67,   66,   65,   62,   61,   60,   59,   58,   55,   52,
       51,   48,   47,   45,   44,   28,   27,   26,   25,   24,
       23,   22,  414,    3,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414
    } ;

static const short int yy_chk[777] =
    {   0,
      421,   74,    1,   74,  103,  420,  103,   22,   22,   22,
       22,   22,   22,   46,   46,   46,   46,   46,   46,   46,
      109,   30,  109,  111,  419,  111,   56,    1,    2,   18,
       56,   17,  139,   18,  139,  141,   17,  141,  158,   17,
      158,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   13,   14,   14,   15,   25,
       16,   28,   30,   28,   16,  161,   36,  161,   13,   16,
       25,   15,   36,   15,  418,    2,  133,  133,  133,  169,
      169,  169,  172,  172,  172,  189,  192,  189,  192,  203,
      209,  203,  209,  192,  211,  417,  211,  218,  218,  218,

      226,  228,  226,  228,  229,  230,  229,  230,  236,  416,
      236,  230,  230,  237,  238,  237,  238,  239,  410,  239,
      238,  238,  252,  398,  252,  254,  377,  254,  252,  252,
      376,  254,  254,  255,  374,  255,  263,  263,  263,  255,
      255,  264,  364,  264,  266,  360,  266,  264,  264,  359,
      266,  266,  276,  296,  276,  296,  300,  358,  300,  301,
      310,  301,  310,  348,  346,  301,  301,  301,  301,  301,
      301,  318,  321,  318,  321,  345,  344,  318,  318,  322,
      343,  322,  323,  342,  339,  322,  322,  323,  323,  323,
      323,  323,  323,  329,  332,  329,  332,  337,  336,  329,

      329,  338,  341,  338,  341,  335,  334,  338,  338,  338,
      338,  338,  338,  347,  333,  347,  349,  350,  349,  350,
      331,  330,  349,  349,  349,  349,  349,  349,  351,  353,
      351,  353,  355,  361,  328,  361,  355,  355,  355,  355,
      355,  355,  355,  357,  372,  357,  372,  327,  326,  357,
      357,  357,  357,  357,  357,  363,  373,  363,  373,  325,
      324,  363,  363,  365,  388,  320,  388,  365,  365,  365,
      365,  365,  365,  365,  366,  391,  366,  391,  319,  317,
      366,  366,  366,  366,  366,  366,  367,  316,  367,  315,
      314,  311,  367,  367,  367,  367,  367,  367,  368,  309,

      368,  308,  307,  304,  368,  368,  368,  368,  368,  368,
      370,  302,  299,  298,  297,  370,  370,  370,  370,  370,
      370,  371,  295,  294,  293,  371,  371,  371,  371,  371,
      371,  371,  375,  292,  375,  291,  289,  287,  375,  375,
      375,  375,  375,  375,  379,  286,  285,  284,  283,  379,
      379,  379,  379,  379,  379,  380,  281,  280,  279,  278,
      380,  380,  380,  380,  380,  380,  381,  277,  275,  274,
      381,  381,  381,  381,  381,  381,  381,  382,  273,  272,
      271,  270,  382,  382,  382,  382,  382,  382,  383,  269,
      268,  267,  265,  383,  383,  383,  383,  383,  383,  385,

      262,  261,  260,  259,  385,  385,  385,  385,  385,  385,
      386,  258,  386,  257,  256,  253,  386,  386,  387,  251,
      387,  250,  249,  248,  387,  387,  387,  387,  387,  387,
      389,  247,  246,  245,  389,  389,  389,  389,  389,  389,
      389,  392,  243,  242,  241,  240,  392,  392,  392,  392,
      392,  392,  395,  235,  234,  233,  232,  395,  395,  395,
      395,  395,  395,  397,  231,  227,  225,  224,  397,  397,
      397,  397,  397,  397,  399,  223,  222,  221,  399,  399,
      399,  399,  399,  399,  399,  400,  220,  400,  219,  217,
      216,  400,  400,  400,  400,  400,  400,  402,  215,  214,

      213,  212,  402,  402,  402,  402,  402,  402,  403,  210,
      403,  404,  208,  207,  403,  403,  404,  404,  404,  404,
      404,  404,  407,  206,  205,  204,  202,  407,  407,  407,
      407,  407,  407,  408,  201,  199,  197,  196,  408,  408,
      408,  408,  408,  408,  409,  195,  194,  193,  191,  409,
      409,  409,  409,  409,  409,  411,  190,  188,  187,  186,
      411,  411,  411,  411,  411,  411,  415,  415,  185,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  175,  174,
      173,  171,  170,  168,  167,  166,  165,  164,  163,  160,
      159,  157,  156,  155,  154,  153,  152,  151,  150,  149,

      148,  147,  146,  145,  144,  143,  142,  140,  138,  137,
      136,  135,  134,  132,  131,  130,  129,  128,  127,  126,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      115,  114,  113,  112,  110,  108,  107,  106,  105,  104,
      102,  101,  100,   99,   98,   97,   96,   95,   94,   93,
       92,   91,   90,   89,   88,   87,   86,   85,   84,   83,
       82,   81,   80,   79,   78,   77,   76,   75,   73,   72,
       71,   70,   69,   68,   67,   66,   65,   64,   63,   62,
       61,   60,   59,   58,   57,   55,   54,   53,   52,   51,
       50,   49,   48,   47,   45,   44,   43,   42,   41,   40,

       39,   38,   37,   35,   34,   33,   32,   31,   29,   27,
       26,   24,   23,   20,   19,   12,   11,   10,    9,    8,
        7,    6,    3,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0

/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_CHAR *yy_c_buf_p = (YY_CHAR *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_CHAR c, YY_CHAR *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#define yy_new_buffer yy_create_buffer

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

YY_DECL
    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
	{
	YY_USER_INIT;

	if ( ! yy_start )
	    yy_start = 1;	/* first start state */

	if ( ! yyin )
	    yyin = stdin;

	if ( ! yyout )
	    yyout = stdout;

	if ( yy_current_buffer )
	    yy_init_buffer( yy_current_buffer, yyin );
	else
	    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_load_buffer_state();

	yy_init = 0;
	}

    while ( 1 )		/* loops until end-of-file is reached */
	{
	yy_cp = yy_c_buf_p;

	/* support of yytext */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 415 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 414 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;

yy_find_action:
	yy_act = yy_accept[yy_current_state];

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:	/* this label is used only to access EOF actions */


	switch ( yy_act )
	    {
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
# line 36 "setups.l"
{ }
	YY_BREAK
case 2:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 37 "setups.l"
{ }
	YY_BREAK
case 3:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 38 "setups.l"
{ cv_maze(yval(), &settings.mdesc); }
	YY_BREAK
case 4:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 39 "setups.l"
{ cv_kw2i(yval(), &settings.si.game,games_entries);}
	YY_BREAK
case 5:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 40 "setups.l"
{ cv_bool(yval(), &settings.point_bullets); }
	YY_BREAK
case 6:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 41 "setups.l"
{ cv_bool(yval(), &settings.si.ricochet); }
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 42 "setups.l"
{ cv_bool(yval(), &settings.si.rel_shoot); }
	YY_BREAK
case 8:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 43 "setups.l"
{ cv_bool(yval(), &settings.si.no_wear); }
	YY_BREAK
case 9:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 44 "setups.l"
{ cv_bool(yval(), &settings.si.restart); }
	YY_BREAK
case 10:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 45 "setups.l"
{ cv_bool(yval(), &settings.commentator); }
	YY_BREAK
case 11:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 46 "setups.l"
{ cv_bool(yval(), &settings.si.full_map); }
	YY_BREAK
case 12:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 47 "setups.l"
{ cv_bool(yval(), &settings.si.pay_to_play); }
	YY_BREAK
case 13:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 48 "setups.l"
{ cv_bool(yval(), &settings.robots_dont_win); }
	YY_BREAK
case 14:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 49 "setups.l"
{ cv_bool(yval(), &settings.max_armor_scale); }
	YY_BREAK
case 15:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 50 "setups.l"
{ cv_bool(yval(), &settings.si.no_nametags); }
	YY_BREAK
case 16:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 51 "setups.l"
{ cv_bool(yval(), &settings.si.no_radar); }
	YY_BREAK
case 17:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 52 "setups.l"
{ cv_bool(yval(), &settings.si.team_score); }
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 53 "setups.l"
{ cv_int( yval(), &settings.si.winning_score); }
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 54 "setups.l"
{ cv_int( yval(), &settings.si.outpost_strength); }
	YY_BREAK
case 20:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 55 "setups.l"
{ cv_flt( yval(), &settings.si.scroll_speed); }
	YY_BREAK
case 21:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 56 "setups.l"
{ cv_flt( yval(), &settings.si.box_slowdown); }
	YY_BREAK
case 22:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 57 "setups.l"
{ cv_flt( yval(), &settings.si.disc_friction); }
	YY_BREAK
case 23:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 58 "setups.l"
{ cv_flt( yval(), &settings.si.owner_slowdown); }
	YY_BREAK
case 24:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 59 "setups.l"
{ cv_flt( yval(), &settings.si.slip_friction); }
	YY_BREAK
case 25:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 60 "setups.l"
{ cv_flt( yval(), &settings.si.normal_friction); }
	YY_BREAK
case 26:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 61 "setups.l"
{ cv_int( yval(), &settings.si.shocker_walls); }
	YY_BREAK
case 27:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 62 "setups.l"
{ cv_int( yval(), &settings.difficulty); }
	YY_BREAK
case 28:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 64 "setups.l"
{
				/* we should load $2 if prog $1 doesn't exist */
				char *progname;
				char *progpath;
				int junk;
				
				strtoke(yytext, SEP);		/* "Program:	" */
				progname = strtoke(NULL, SEP);
				progpath = strtoke(NULL, SEP);

				if (DESC_LOADED != find_pdesc(progname, &junk)) {
					load_prog_desc(progpath, TRUE);
				}
}
	YY_BREAK
case 29:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 79 "setups.l"
{ /* Who cares... */ }
	YY_BREAK
case 30:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 81 "setups.l"
{
			/* V#N: owner->name, disp, vptr->name, team, #progs, progs... */
				char buf[BUFLEN];
				char *cvn;
				char *cplayer;
				char *cdisp;
				char *cvname;
				char *cteam;
				char *cnprogs;
				char *cprog1;
				extern Combatant combatant[];
				extern char *teams_entries[];
				int vn, nprogs;
				int num;
				int i;

				cvn		=	2+strtoke(yytext, SEP);
				cplayer	=	strtoke(NULL, SEP);
				cdisp	=	strtoke(NULL, SEP);
				cvname	=	strtoke(NULL, SEP);
				cteam	=	strtoke(NULL, SEP);
				cnprogs	=	strtoke(NULL, SEP);
				cprog1	=	strtoke(NULL, SEP);
				
				/* printf("%s, %s, %s, %s, %s, %s, %s\n",
					cvn, cplayer, cdisp, cvname, cteam, cnprogs, cprog1); */
				
				vn = atoi(cvn);

				/* See get_player_info */

				combatant[vn].num_players = 1;
				strcpy(combatant[vn].name, cplayer);
				combatant[vn].player[0] = UNDEFINED;
				for(i = 0; i < num_terminals; i++) {
					if (strcmp(terminal[i]->player_name, cplayer)) continue;
					combatant[vn].player[0] = i;
				}

				if (DESC_LOADED == make_vdesc(cvname, &num)) {
					combatant[vn].vdesc = num;
				}
				else
				{
					fprintf(stderr, "Warning!  Cannot load vehicle %s\n",
							cvname);
				}

				nprogs = atoi(cnprogs);
				combatant[vn].program[0] = UNDEFINED;
				combatant[vn].num_programs = 0;
				if (nprogs && DESC_LOADED == find_pdesc(cprog1, &num)) {
					combatant[vn].num_programs = atoi(cnprogs);
					combatant[vn].program[0] = num;
				}

				/* printf("(%d: %s/%d)\n", combatant[vn].num_programs,
					cprog1, combatant[vn].program[0]); */

				cv_kw2i(cteam, &num, teams_entries, MAX_TEAMS);
				combatant[vn].team = num;

				combatant_to_grid(combatant + vn, atoi(cvn));
			}
	YY_BREAK
case 31:
# line 146 "setups.l"
{
				fprintf(stderr, "Bad setups file (%s)\n", yytext);
				exit(2);
			}
	YY_BREAK
case 32:
# line 151 "setups.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yytext - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yytext + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yytext + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yytext,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yytext + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yytext + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#ifdef FLEX_DEBUG
		printf( "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()

    {
    register YY_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_CHAR *source = yytext - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yytext;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yytext begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yytext = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

static yy_state_type yy_get_previous_state()

    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp;

    register YY_CHAR *yy_bp = yytext;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;

    for ( yy_cp = yytext + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 415 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	}

    return ( yy_current_state );
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif

    {
    register int yy_is_jam;
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 415 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 414);

    return ( yy_is_jam ? 0 : yy_current_state );
    }


#ifdef YY_USE_PROTOS
static void yyunput( YY_CHAR c, register YY_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_CHAR c;
register YY_CHAR *yy_bp;
#endif

    {
    register YY_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yytext again */
    }


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif

    {
    int c;
    YY_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yytext = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yytext + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;

#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yytext + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif

    {
    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    yy_init_buffer( b, file );

    return ( b );
    }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
# line 151 "setups.l"


char *yval()
{
	char *cp;

	/* printf(":: %s\n", yytext); */

	for(cp = yytext; *cp != ':'; cp++) ;
	cp++;
	while(*cp == ' ' || *cp == '\t') cp++;

	return cp;
}

void cv_maze(val, maze)
char *val;
Mdesc **maze;
{
	int iCtr;
	extern int num_mdescs;
	extern Mdesc *mdesc;

	/* set to the random maze for now */
	*maze = (Mdesc *) NULL;

	/* need to search the mdesc[] to find the correct maze */
	for (iCtr = 0; iCtr < num_mdescs; iCtr++)
	{
		if (mdesc[iCtr].name)
		{
			if (! strcmp(mdesc[iCtr].name, val))
			{
				*maze = & mdesc[iCtr];
				break;
			}
		}
	}

	if (*maze == (Mdesc *) NULL)
	{
		fprintf(stderr, "Yo butthead!  Using the RANDOM maze.\n");
	}
}

void cv_str(val, store)
char *val;
char **store;
{
	*store = strdup(val);
}

void cv_kw2i(val, ival, arr, max)
char *val;
int *ival;
char *arr[];
int max;
{
	for(*ival = 0; *ival < max; *ival += 1) {
		if (!strcmp(arr[*ival], val)) return;
	}

	*ival = 0;
	return;
}

void cv_bool(val, bool)
char *val;
int *bool;
{
	*bool = (*val == '1');

	if (*val == '1' || *val == '0' && '\0' == *(val+1)) return;

	fprintf(stderr, "Bizare bool ('%c%c", *val, *(val+1));
	fprintf(stderr, "')!\n");
}

void cv_flt(val, fval)
char *val;
FLOAT *fval;
{
	*fval = atof(val);
}

void cv_int(val, ival)
char *val;
int *ival;
{
	*ival = atoi(val);
}

int load_settings(pcFileName)
	char *pcFileName;
{
	static int bCalled = FALSE;
	FILE *fp;

	fp = fopen(pcFileName, "r");
	if (!fp) {
		fprintf(stderr, "Can't find setups file\n");
		return (0);
	}

	if (bCalled)
	{
		yyrestart(fp);
		yylex();
	}
	else
	{
		yyin = fp;
		yylex();

		bCalled = TRUE;
	}

	fclose(fp);

	return(1);
}

/* Like ANSI strtok, but won't return an empty string */
char *strtoke(in, sep)
char *in, *sep;
{
	char *res;

	do {
		res = strtok(in, sep);
		in = NULL;
	} while(res && !*res);

	return res;
}
