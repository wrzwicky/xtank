/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /vol/bsdi/MASTER/BSDI_OS/usr.bin/lex/skel.c,v 1.1 1994/01/12 11:34:49 donn Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	/* Whether we've seen an EOF on this buffer. */
	int yy_eof_status;
#define EOF_NOT_SEEN 0
	/* "Pending" happens when the EOF has been seen but there's still
	 * some text to process.  Note that when we actually see the EOF,
	 * we switch the status back to "not seen" (via yyrestart()), so
	 * that the user can continue scanning by just pointing yyin at
	 * a new input file.
	 */
#define EOF_PENDING 1
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static void yyunput YY_PROTO(( int c, char *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
static void yy_push_state YY_PROTO(( int new_state ));
static void yy_pop_state YY_PROTO(( void ));
static int yy_top_state YY_PROTO(( void ));

#ifndef yytext_ptr
static void yy_flex_strcpy YY_PROTO(( char *, const char * ));
#endif

static void *yy_flex_alloc YY_PROTO(( unsigned int ));
static void *yy_flex_realloc YY_PROTO(( void *ptr, unsigned int ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
typedef int yy_state_type;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
extern char *yytext;
#define yytext_ptr yytext

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 47
static const short int yy_accept[607] =
    {   0,
       45,   45,   47,   45,    1,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       44,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,    4,   45,    3,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   43,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,    8,   45,   45,
       45,   45,   45,   45,   42,   45,   45,    9,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   40,   11,   45,   15,   45,   45,   45,   45,   45,

       45,    7,   45,    6,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   34,   45,   45,   45,   41,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   39,
       45,   45,   45,   32,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   16,   45,
       45,   45,   45,   45,   45,   45,    2,   45,   10,   33,
       45,   45,   45,   45,   45,   45,   45,   45,   12,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   30,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   29,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       31,   45,   18,   45,   45,   45,   45,   45,    5,   25,
       45,   45,   38,   36,   45,   45,   45,   45,   45,   45,
       45,   45,   27,   45,   45,   45,   45,   35,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   24,   14,
       37,   45,   45,   45,   17,   45,   45,   45,   45,   45,
       45,   45,   45,   28,   13,   45,   45,   45,   45,   21,
       45,   45,   45,   45,   45,   26,   45,   45,   19,   45,

       23,   45,   22,   45,   20,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    6,    1,
        1,    1,    1,    1,    1,    7,    1,    8,    9,   10,
       11,   12,   10,   13,   10,   10,   10,   14,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,    1,   19,
       20,   21,    1,    1,    1,    1,   22,   23,   24,   25,
        1,   26,   27,   28,   29,   30,   31,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,
       45,   46,    1,   47,   48,   49,   50,   51,   52,   53,
       54,   55,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[56] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const short int yy_base[616] =
    {   0,
        0,   28, 1042,    0, 1043, 1036,  995,  994,  998,   15,
     1005, 1004,    4,   11,   30,   28,    0,    1,  993,    0,
      985,    0,    0,  980,  989,   30,  984,  988,  986,   16,
      985,   19,  978,  982,  971,  992,  983,  977,   28,  987,
      987,  972,  973,  977,  972,   42,  966,  967,  969,  980,
        6, 1007,  967,  972,  974,  973,  964,  969, 1000,  967,
      966,  970,  957,  953,  962,  993,  942,  951,  956,    3,
      944,  947,  946,  945,  955,  942,  946,  943,  949,  944,
      979,  938,  937,    0,  932,  943,  938,  973,  940,  971,
      960,  958,  958,  922,  934,  937,  923,  920,  938,  929,

      915,  916,  943,  912,  928,  925,  909,  915,  915,  951,
      906,  949,  906,  908,  930,  909,  907,   20,  905,  902,
      911,   61,  940,  921,   23,  895,   24,  909,  908,  897,
      890,  933,  891,  888,  930,  901,  892,  891,  883,  890,
      880,  885,  890,  906,  910,  896,  877,  889,  875,  875,
      904,  914,   83,  871,  866,  864,  881,  865,  875,  864,
      873,  884,  875,   39,  863,   88,  867,  857,  899,  853,
      874,  896,  895,  882,  854,  849,  844,  845,  857,  888,
      887,  843,  842,   89,  854,  840,  837,  853,  846,   92,
     1043,  831,  850,  839,  837,  839,  846,  841,  834,   58,

      829,  871,   95,  828,  869,  101,  823,  856,  850,  864,
      825,  841,  837,  814,  849,  826,  825,  846,  810,  840,
      830,  852,  815,  104,  809,  804,  816,  809,  846,  105,
      814,  799,  798,  814,  811,  795,  807,  806,  804,  826,
      825, 1043,  791, 1043,  823,  108,  789,  808,  789,  791,
      796,  789,  109,  816,  825,  113,  814,  782,  780,  794,
      790,  820,  116,  775,  817,  816,  771,  791,  808,  771,
      770,  760,  775,  763,  797,  775,  763,  794,  119,  120,
      803,  123,  124,  766,  756,  752,  771,  760,  759,  127,
      132,  782,  133,  136,  755,  762,  765,  747, 1043,  759,

      124,  770,  789,  758,  779,  738,  742,  774,  751,  746,
      142,  771,  739,  143,  146,  147,  756,  155,  779,  747,
      733,  744,  724,  741,  740,  772,  158,  163,  734,  770,
      166,  766,  735,  728,  729,  754,  723,  719,  720,  712,
      739,  717,  750,  716,  745,  174,  744,  712,  175,  178,
      709,  187,  752,  190,  747,  712,  740, 1043,  690,  699,
      687,  708,  675,  669, 1043,  707,  661, 1043,  705,  658,
      664,  656,  652,  193,  642,  641,  681,  638,  628,  624,
      657,  646,  194,  197,  198,  615,  208,  220,  609,  654,
      210, 1043, 1043,  617, 1043,  608,  603,  593,  221,  591,

      587, 1043,  600, 1043,  622,  611,  576,  579,  232,  611,
      571,  130,  609,  570,  566,  588,  233,  240,  242,  254,
      584, 1043,  265,  276,  575, 1043,  546,  542,  541,  531,
      288,  525,  550,  549,  531,  255,  547,  539,  549,  523,
      546,  504,  503,  516,  473,  512,  522,  291,  514, 1043,
      302,  267,  313, 1043,  324,  268,  480,  471,  465,  492,
      502,  455,  278,  304,  463,  336,  315,  316, 1043,  450,
      215,  444,  461,  446,  468,  326, 1043,  347, 1043, 1043,
      358,  370,  381,  393,  467,  466,  433,  327, 1043,  457,
      396,  404,  426,  407,  419,  431,  465,  425,  423,  401,

      406,  406,  337,  443, 1043,  454,  465,  476,  434,  349,
      360,  412,  488,  361,  422,  408,  389, 1043,  499,  510,
      521,  384,  346,  345,  329,  338,  301,  533,  535,  546,
     1043,  557, 1043,  569,  572,  371,  583,  595, 1043, 1043,
      383,  597, 1043, 1043,  608,  298,  258,  255,  262,  384,
      277,  278, 1043,  619,  258,  630,  642, 1043,  653,  257,
      665,  667,  193,  199,  225,  185,  679,  405, 1043, 1043,
     1043,  681,  692,  703, 1043,  223,  190,  171,  420,  176,
      178,  715,  717, 1043, 1043,  432,  131,  729,  444, 1043,
      166,  732,  152,  151,  740, 1043,  127,  456, 1043,  113,

     1043,  743, 1043,   98, 1043, 1043,  752,   99,   82,   37,
       28,   20,    5,    4,    0
    } ;

static const short int yy_def[616] =
    {   0,
      607,  607,  606,  608,  606,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,

      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  609,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  609,  609,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  610,  608,  611,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      606,  608,  608,  608,  608,  608,  608,  608,  608,  608,

      608,  610,  610,  608,  611,  611,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  612,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  606,  608,  606,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  612,  612,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  613,
      608,  608,  608,  608,  608,  608,  608,  608,  606,  608,

      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  614,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  613,  613,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  615,  614,  614,  608,  608,  608,  606,  608,  608,
      608,  608,  608,  608,  606,  608,  608,  606,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  615,
      615,  606,  606,  608,  606,  608,  608,  608,  608,  608,

      608,  606,  608,  606,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  606,  608,  608,  608,  606,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  606,
      608,  608,  608,  606,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  606,  608,
      608,  608,  608,  608,  608,  608,  606,  608,  606,  606,
      608,  608,  608,  608,  608,  608,  608,  608,  606,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,

      608,  608,  608,  608,  606,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  606,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      606,  608,  606,  608,  608,  608,  608,  608,  606,  606,
      608,  608,  606,  606,  608,  608,  608,  608,  608,  608,
      608,  608,  606,  608,  608,  608,  608,  606,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  606,  606,
      606,  608,  608,  608,  606,  608,  608,  608,  608,  608,
      608,  608,  608,  606,  606,  608,  608,  608,  608,  606,
      608,  608,  608,  608,  608,  606,  608,  608,  606,  608,

      606,  608,  606,  608,  606,    0,  606,  606,  606,  606,
      606,  606,  606,  606,  606
    } ;

static const short int yy_nxt[1099] =
    {   0,
      390,  118,    5,  118,  353,  326,  103,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   84,
      262,  153,   62,  153,  164,  166,  164,  166,  205,    6,
        5,   48,   45,   42,  104,   31,   46,  202,   43,   49,
      203,   44,  203,    7,    8,    9,   10,   11,   32,   12,
       13,   14,   15,   16,   17,   18,   19,    6,   20,   27,
       33,   35,   34,   39,   28,   63,   54,   40,   59,   70,
       60,   36,   41,   78,   37,   71,   38,   55,  157,  158,
       21,  159,  152,   79,  153,  191,  153,  160,  161,  206,
      224,  206,  224,  230,  239,  230,  203,  242,  203,   22,

      605,  240,  206,  244,  206,  263,  230,  263,  230,  283,
      290,  283,  290,  269,  293,  603,  293,  263,  299,  263,
      315,  316,  315,  316,  318,  283,  318,  283,  327,  601,
      327,  319,  319,  328,  293,  328,  293,  331,  337,  331,
      330,  330,  338,  349,  352,  349,  352,  354,  316,  354,
      316,  339,  442,  599,  355,  355,  318,  443,  318,  327,
      365,  327,  357,  357,  328,  598,  328,  331,  596,  331,
      366,  366,  593,  369,  369,  384,  349,  384,  349,  388,
      590,  388,  387,  387,  387,  387,  387,  387,  391,  589,
      391,  354,  392,  354,  409,  418,  409,  418,  384,  420,

      384,  420,  587,  586,  419,  419,  419,  419,  419,  419,
      422,  391,  426,  391,  423,  387,  387,  387,  387,  387,
      387,  388,  431,  388,  431,  585,  580,  424,  424,  424,
      424,  424,  424,  409,  448,  409,  448,  498,  579,  439,
      439,  418,  499,  418,  450,  578,  577,  449,  449,  419,
      419,  419,  419,  419,  419,  420,  466,  420,  466,  575,
      570,  451,  451,  451,  451,  451,  451,  422,  482,  484,
      482,  484,  453,  453,  453,  453,  453,  453,  454,  491,
      569,  491,  455,  424,  424,  424,  424,  424,  424,  431,
      568,  431,  448,  566,  448,  461,  461,  565,  478,  478,

      478,  478,  478,  478,  480,  492,  564,  492,  481,  451,
      451,  451,  451,  451,  451,  422,  495,  496,  495,  496,
      453,  453,  453,  453,  453,  453,  454,  504,  513,  504,
      513,  483,  483,  483,  483,  483,  483,  466,  528,  466,
      528,  563,  551,  494,  494,  494,  494,  494,  494,  505,
      534,  550,  534,  506,  478,  478,  478,  478,  478,  478,
      480,  535,  538,  535,  538,  507,  507,  507,  507,  507,
      507,  482,  557,  482,  557,  549,  548,  508,  508,  508,
      508,  508,  508,  454,  561,  567,  561,  567,  483,  483,
      483,  483,  483,  483,  484,  547,  484,  491,  546,  491,

      509,  509,  541,  515,  515,  492,  582,  492,  582,  518,
      540,  516,  516,  519,  494,  494,  494,  494,  494,  494,
      495,  588,  495,  588,  539,  536,  520,  520,  520,  520,
      520,  520,  496,  592,  496,  592,  533,  527,  521,  521,
      521,  521,  521,  521,  504,  595,  504,  595,  526,  525,
      529,  529,  529,  529,  529,  529,  505,  602,  524,  602,
      523,  530,  530,  530,  530,  530,  530,  480,  522,  517,
      514,  512,  507,  507,  507,  507,  507,  507,  531,  511,
      510,  503,  532,  508,  508,  508,  508,  508,  508,  513,
      502,  513,  501,  500,  497,  537,  537,  537,  537,  537,

      537,  518,  493,  490,  489,  488,  542,  542,  542,  542,
      542,  542,  543,  487,  486,  485,  479,  520,  520,  520,
      520,  520,  520,  544,  477,  476,  475,  545,  521,  521,
      521,  521,  521,  521,  528,  474,  528,  553,  473,  472,
      552,  552,  529,  529,  529,  529,  529,  529,  505,  471,
      470,  469,  468,  530,  530,  530,  530,  530,  530,  531,
      467,  465,  464,  463,  554,  554,  554,  554,  554,  554,
      534,  462,  534,  535,  460,  535,  555,  555,  459,  556,
      556,  556,  556,  556,  556,  558,  458,  457,  456,  559,
      537,  537,  537,  537,  537,  537,  538,  452,  538,  518,

      447,  446,  560,  560,  542,  542,  542,  542,  542,  542,
      544,  445,  444,  441,  440,  562,  562,  562,  562,  562,
      562,  531,  438,  437,  436,  435,  554,  554,  554,  554,
      554,  554,  571,  434,  433,  432,  572,  556,  556,  556,
      556,  556,  556,  557,  430,  557,  429,  428,  427,  573,
      573,  573,  573,  573,  573,  558,  426,  425,  421,  417,
      574,  574,  574,  574,  574,  574,  561,  416,  561,  544,
      415,  414,  576,  576,  562,  562,  562,  562,  562,  562,
      567,  413,  567,  571,  412,  411,  581,  581,  583,  583,
      583,  583,  583,  583,  584,  410,  408,  407,  406,  573,

      573,  573,  573,  573,  573,  558,  405,  404,  403,  402,
      574,  574,  574,  574,  574,  574,  582,  401,  582,  571,
      400,  399,  591,  591,  583,  583,  583,  583,  583,  583,
      588,  398,  588,  592,  397,  592,  594,  594,  396,  597,
      597,  595,  395,  595,  602,  394,  602,  600,  600,  393,
      604,  604,    4,    4,  392,  389,  386,  385,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  368,  367,  365,  364,  363,  362,  361,  360,
      359,  358,  356,  351,  350,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  336,  335,  334,  333,  332,  329,

      325,  324,  323,  322,  321,  320,  317,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  292,  291,
      289,  288,  287,  286,  285,  284,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  268,
      267,  266,  265,  264,  261,  260,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  242,  241,  238,  237,  236,  235,  234,
      233,  232,  231,  229,  228,  227,  226,  225,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,

      211,  210,  209,  208,  207,  204,  201,  200,  199,  198,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  185,  184,  183,  182,  181,  180,  179,  178,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  168,
      167,  165,  163,  162,  156,  155,  154,  151,  150,  149,
      148,  147,  146,  145,  144,  143,  142,  141,  140,  139,
      138,  137,  136,  135,  134,  133,  132,  131,  130,  129,
      128,  127,  126,  125,  124,  123,  122,  121,  120,  119,
      117,  116,  115,  114,  113,  112,  111,  110,  109,  108,
      107,  106,  105,  102,  101,  100,   99,   98,   97,   96,

       95,   94,   93,   92,   91,   90,   89,   88,   87,   86,
       85,   83,   82,   81,   80,   77,   76,   75,   74,   73,
       72,   69,   68,   67,   66,   65,   64,   61,   58,   57,
       56,   53,   52,   50,   47,   30,   29,   26,   25,   24,
       23,  606,    3,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606

    } ;

static const short int yy_chk[1099] =
    {   0,
      615,   84,    1,   84,  614,  613,   70,   23,   23,   23,
       23,   23,   23,   51,   51,   51,   51,   51,   51,   51,
      612,  118,   32,  118,  125,  127,  125,  127,  611,    1,
        2,   20,   18,   17,   70,   13,   18,  610,   17,   20,
      164,   17,  164,    2,    2,    2,    2,    2,   13,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   10,
       14,   15,   14,   16,   10,   32,   26,   16,   30,   39,
       30,   15,   16,   46,   15,   39,   15,   26,  122,  122,
        2,  122,  609,   46,  153,  153,  153,  122,  122,  166,
      184,  166,  184,  190,  200,  190,  203,  203,  203,  608,

      604,  200,  206,  206,  206,  224,  230,  224,  230,  246,
      253,  246,  253,  230,  256,  600,  256,  263,  263,  263,
      279,  280,  279,  280,  282,  283,  282,  283,  290,  597,
      290,  283,  283,  291,  293,  291,  293,  294,  301,  294,
      293,  293,  301,  311,  314,  311,  314,  315,  316,  315,
      316,  301,  412,  594,  316,  316,  318,  412,  318,  327,
      327,  327,  318,  318,  328,  593,  328,  331,  591,  331,
      328,  328,  587,  331,  331,  346,  349,  346,  349,  350,
      581,  350,  349,  349,  349,  349,  349,  349,  352,  580,
      352,  354,  354,  354,  374,  383,  374,  383,  384,  385,

      384,  385,  578,  577,  384,  384,  384,  384,  384,  384,
      387,  391,  391,  391,  387,  387,  387,  387,  387,  387,
      387,  388,  399,  388,  399,  576,  566,  388,  388,  388,
      388,  388,  388,  409,  417,  409,  417,  471,  565,  409,
      409,  418,  471,  418,  419,  564,  563,  418,  418,  419,
      419,  419,  419,  419,  419,  420,  436,  420,  436,  560,
      555,  420,  420,  420,  420,  420,  420,  423,  452,  456,
      452,  456,  423,  423,  423,  423,  423,  423,  424,  463,
      552,  463,  424,  424,  424,  424,  424,  424,  424,  431,
      551,  431,  448,  549,  448,  431,  431,  548,  448,  448,

      448,  448,  448,  448,  451,  464,  547,  464,  451,  451,
      451,  451,  451,  451,  451,  453,  467,  468,  467,  468,
      453,  453,  453,  453,  453,  453,  455,  476,  488,  476,
      488,  455,  455,  455,  455,  455,  455,  466,  503,  466,
      503,  546,  527,  466,  466,  466,  466,  466,  466,  478,
      510,  526,  510,  478,  478,  478,  478,  478,  478,  478,
      481,  511,  514,  511,  514,  481,  481,  481,  481,  481,
      481,  482,  536,  482,  536,  525,  524,  482,  482,  482,
      482,  482,  482,  483,  541,  550,  541,  550,  483,  483,
      483,  483,  483,  483,  484,  523,  484,  491,  522,  491,

      484,  484,  517,  491,  491,  492,  568,  492,  568,  494,
      516,  492,  492,  494,  494,  494,  494,  494,  494,  494,
      495,  579,  495,  579,  515,  512,  495,  495,  495,  495,
      495,  495,  496,  586,  496,  586,  509,  502,  496,  496,
      496,  496,  496,  496,  504,  589,  504,  589,  501,  500,
      504,  504,  504,  504,  504,  504,  506,  598,  499,  598,
      498,  506,  506,  506,  506,  506,  506,  507,  497,  493,
      490,  487,  507,  507,  507,  507,  507,  507,  508,  486,
      485,  475,  508,  508,  508,  508,  508,  508,  508,  513,
      474,  513,  473,  472,  470,  513,  513,  513,  513,  513,

      513,  519,  465,  462,  461,  460,  519,  519,  519,  519,
      519,  519,  520,  459,  458,  457,  449,  520,  520,  520,
      520,  520,  520,  521,  447,  446,  445,  521,  521,  521,
      521,  521,  521,  521,  528,  444,  528,  529,  443,  442,
      528,  528,  529,  529,  529,  529,  529,  529,  530,  441,
      440,  439,  438,  530,  530,  530,  530,  530,  530,  532,
      437,  435,  434,  433,  532,  532,  532,  532,  532,  532,
      534,  432,  534,  535,  430,  535,  534,  534,  429,  535,
      535,  535,  535,  535,  535,  537,  428,  427,  425,  537,
      537,  537,  537,  537,  537,  537,  538,  421,  538,  542,

      416,  415,  538,  538,  542,  542,  542,  542,  542,  542,
      545,  414,  413,  411,  410,  545,  545,  545,  545,  545,
      545,  554,  408,  407,  406,  405,  554,  554,  554,  554,
      554,  554,  556,  403,  401,  400,  556,  556,  556,  556,
      556,  556,  556,  557,  398,  557,  397,  396,  394,  557,
      557,  557,  557,  557,  557,  559,  390,  389,  386,  382,
      559,  559,  559,  559,  559,  559,  561,  381,  561,  562,
      380,  379,  561,  561,  562,  562,  562,  562,  562,  562,
      567,  378,  567,  572,  377,  376,  567,  567,  572,  572,
      572,  572,  572,  572,  573,  375,  373,  372,  371,  573,

      573,  573,  573,  573,  573,  574,  370,  369,  367,  366,
      574,  574,  574,  574,  574,  574,  582,  364,  582,  583,
      363,  362,  582,  582,  583,  583,  583,  583,  583,  583,
      588,  361,  588,  592,  360,  592,  588,  588,  359,  592,
      592,  595,  357,  595,  602,  356,  602,  595,  595,  355,
      602,  602,  607,  607,  353,  351,  348,  347,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  330,  329,  326,  325,  324,  323,  322,  321,
      320,  319,  317,  313,  312,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  300,  298,  297,  296,  295,  292,

      289,  288,  287,  286,  285,  284,  281,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  262,  261,  260,  259,  258,  257,  255,  254,
      252,  251,  250,  249,  248,  247,  245,  243,  241,  240,
      239,  238,  237,  236,  235,  234,  233,  232,  231,  229,
      228,  227,  226,  225,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      207,  205,  204,  202,  201,  199,  198,  197,  196,  195,
      194,  193,  192,  189,  188,  187,  186,  185,  183,  182,
      181,  180,  179,  178,  177,  176,  175,  174,  173,  172,

      171,  170,  169,  168,  167,  165,  163,  162,  161,  160,
      159,  158,  157,  156,  155,  154,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  143,  142,  141,  140,  139,
      138,  137,  136,  135,  134,  133,  132,  131,  130,  129,
      128,  126,  124,  123,  121,  120,  119,  117,  116,  115,
      114,  113,  112,  111,  110,  109,  108,  107,  106,  105,
      104,  103,  102,  101,  100,   99,   98,   97,   96,   95,
       94,   93,   92,   91,   90,   89,   88,   87,   86,   85,
       83,   82,   81,   80,   79,   78,   77,   76,   75,   74,
       73,   72,   71,   69,   68,   67,   66,   65,   64,   63,

       62,   61,   60,   59,   58,   57,   56,   55,   54,   53,
       52,   50,   49,   48,   47,   45,   44,   43,   42,   41,
       40,   38,   37,   36,   35,   34,   33,   31,   29,   28,
       27,   25,   24,   21,   19,   12,   11,    9,    8,    7,
        6,    3,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
# line 1 "setups.l"
/*
** Xtank
**
** Copyright 1993 by Pix Technologies Corp.
**
** setups.l
*/
/*
$Author: lidl $
$Id: setups.l,v 1.1.1.1 1995/02/01 00:25:38 lidl Exp $
*/
# line 15 "setups.l"

#include <stdio.h>
#include <string.h>

#include "xtank.h"
#include "vehicle.h"
#include "setup.h"
#include "globals.h"
#include "team.h"
/* For "UNDEFINED" */
#include "interface.h"
#include "terminal.h"
#include "vstructs.h"

#define BUFLEN 256
#define SEP ",\t"

extern char *games_entries[];
extern Settings settings;
extern int num_terminals;
extern Terminal *terminal[];

char *yval(), *strtoke();
void cv_str(), cv_kw2i(), cv_bool(), cv_int(), cv_flt(), cv_maze(), cv_force();


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = getc( yyin ); \
		result = c == EOF ? 0 : 1; \
		buf[0] = (char) c; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

# line 48 "setups.l"



	if ( yy_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( yy_current_buffer )
			yy_init_buffer( yy_current_buffer, yyin );
		else
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();

		yy_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		if ( yy_bp[-1] == '\n' )
			++yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 607 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1043 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_USER_ACTION
# line 50 "setups.l"
{ }
	YY_BREAK
case 2:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 51 "setups.l"
{ }
	YY_BREAK
case 3:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 52 "setups.l"
{ cv_maze(yval(), &settings.mdesc); }
	YY_BREAK
case 4:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 53 "setups.l"
{ cv_kw2i(yval(), &settings.si.game,games_entries);}
	YY_BREAK
case 5:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 54 "setups.l"
{ cv_bool(yval(), &settings.point_bullets); }
	YY_BREAK
case 6:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 55 "setups.l"
{ cv_bool(yval(), &settings.si.ricochet); }
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 56 "setups.l"
{ cv_bool(yval(), &settings.si.rel_shoot); }
	YY_BREAK
case 8:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 57 "setups.l"
{ cv_bool(yval(), &settings.si.no_wear); }
	YY_BREAK
case 9:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 58 "setups.l"
{ cv_bool(yval(), &settings.si.restart); }
	YY_BREAK
case 10:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 59 "setups.l"
{ cv_bool(yval(), &settings.commentator); }
	YY_BREAK
case 11:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 60 "setups.l"
{ cv_bool(yval(), &settings.si.full_map); }
	YY_BREAK
case 12:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 61 "setups.l"
{ cv_bool(yval(), &settings.si.pay_to_play); }
	YY_BREAK
case 13:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 62 "setups.l"
{ cv_bool(yval(), &settings.robots_dont_win); }
	YY_BREAK
case 14:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 63 "setups.l"
{ cv_bool(yval(), &settings.max_armor_scale); }
	YY_BREAK
case 15:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 64 "setups.l"
{ cv_bool(yval(), &settings.si.no_nametags); }
	YY_BREAK
case 16:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 65 "setups.l"
{ cv_bool(yval(), &settings.si.team_score); }
	YY_BREAK
case 17:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 66 "setups.l"
{ cv_bool(yval(), &settings.si.player_teleport); }
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 67 "setups.l"
{ cv_bool(yval(), &settings.si.disc_teleport); }
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 68 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_from_team); }
	YY_BREAK
case 20:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 69 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_from_neutral); }
	YY_BREAK
case 21:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 70 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_to_team); }
	YY_BREAK
case 22:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 71 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_to_neutral); }
	YY_BREAK
case 23:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 72 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_any_to_any); }
	YY_BREAK
case 24:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 73 "setups.l"
{ cv_bool(yval(), &settings.si.war_goals_only); }
	YY_BREAK
case 25:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 74 "setups.l"
{ cv_bool(yval(), &settings.si.relative_disc); }
	YY_BREAK
case 26:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 75 "setups.l"
{ cv_bool(yval(), &settings.si.ultimate_own_goal); }
	YY_BREAK
case 27:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 76 "setups.l"
{ cv_int( yval(), &settings.si.winning_score); }
	YY_BREAK
case 28:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 77 "setups.l"
{ cv_int( yval(), &settings.si.outpost_strength); }
	YY_BREAK
case 29:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 78 "setups.l"
{ cv_flt( yval(), &settings.si.scroll_speed); }
	YY_BREAK
case 30:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 79 "setups.l"
{ cv_flt( yval(), &settings.si.box_slowdown); }
	YY_BREAK
case 31:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 80 "setups.l"
{ cv_flt( yval(), &settings.si.disc_friction); }
	YY_BREAK
case 32:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 81 "setups.l"
{ cv_flt( yval(), &settings.si.disc_speed); }
	YY_BREAK
case 33:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 82 "setups.l"
{ cv_flt( yval(), &settings.si.disc_damage); }
	YY_BREAK
case 34:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 83 "setups.l"
{ cv_flt( yval(), &settings.si.disc_heat); }
	YY_BREAK
case 35:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 84 "setups.l"
{ cv_flt( yval(), &settings.si.owner_slowdown); }
	YY_BREAK
case 36:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 85 "setups.l"
{ cv_flt( yval(), &settings.si.slip_friction); }
	YY_BREAK
case 37:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 86 "setups.l"
{ cv_flt( yval(), &settings.si.normal_friction); }
	YY_BREAK
case 38:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 87 "setups.l"
{ cv_int( yval(), &settings.si.shocker_walls); }
	YY_BREAK
case 39:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 88 "setups.l"
{ cv_int( yval(), &settings.difficulty); }
	YY_BREAK
case 40:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 89 "setups.l"
{ cv_force(yval(), INT_FORCE_ON); }
	YY_BREAK
case 41:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 90 "setups.l"
{ cv_force(yval(), INT_FORCE_OFF); }
	YY_BREAK
case 42:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 92 "setups.l"
{
				/* we should load $2 if prog $1 doesn't exist */
				char *progname;
				char *progpath;
				int junk;
				
				strtoke(yytext, SEP);		/* "Program:	" */
				progname = strtoke(NULL, SEP);
				progpath = strtoke(NULL, SEP);

				if (DESC_LOADED != find_pdesc(progname, &junk)) {
					load_prog_desc(progpath, TRUE);
				}
}
	YY_BREAK
case 43:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 107 "setups.l"
{ /* Who cares... */ }
	YY_BREAK
case 44:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 109 "setups.l"
{
			/* V#N: owner->name, disp, vptr->name, team, #progs, progs... */
				char buf[BUFLEN];
				char *cvn;
				char *cplayer;
				char *cdisp;
				char *cvname;
				char *cteam;
				char *cnprogs;
				char *cprog1;
				extern Combatant combatant[];
				extern char *teams_entries[];
				int vn, nprogs;
				int num;
				int i;

				cvn		=	2+strtoke(yytext, SEP);
				cplayer	=	strtoke(NULL, SEP);
				cdisp	=	strtoke(NULL, SEP);
				cvname	=	strtoke(NULL, SEP);
				cteam	=	strtoke(NULL, SEP);
				cnprogs	=	strtoke(NULL, SEP);
				cprog1	=	strtoke(NULL, SEP);
				
				/* printf("%s, %s, %s, %s, %s, %s, %s\n",
					cvn, cplayer, cdisp, cvname, cteam, cnprogs, cprog1); */
				
				vn = atoi(cvn);

				/* See get_player_info */

				combatant[vn].num_players = 1;
				strcpy(combatant[vn].name, cplayer);
				combatant[vn].player[0] = UNDEFINED;
				for(i = 0; i < num_terminals; i++) {
					if (strcmp(terminal[i]->player_name, cplayer)) continue;
					combatant[vn].player[0] = i;
				}

				if (DESC_LOADED == make_vdesc(cvname, &num)) {
					combatant[vn].vdesc = num;
				}
				else
				{
					fprintf(stderr, "Warning!  Cannot load vehicle %s\n",
							cvname);
				}

				nprogs = atoi(cnprogs);
				combatant[vn].program[0] = UNDEFINED;
				combatant[vn].num_programs = 0;
				if (nprogs && DESC_LOADED == find_pdesc(cprog1, &num)) {
					combatant[vn].num_programs = atoi(cnprogs);
					combatant[vn].program[0] = num;
				}

				/* printf("(%d: %s/%d)\n", combatant[vn].num_programs,
					cprog1, combatant[vn].program[0]); */

				cv_kw2i(cteam, &num, teams_entries, MAX_TEAMS);
				combatant[vn].team = num;

				combatant_to_grid(combatant + vn, atoi(cvn));
			}
	YY_BREAK
case 45:
YY_USER_ACTION
# line 174 "setups.l"
{
				fprintf(stderr, "Bad setups file (%s)\n", yytext);
				exit(2);
			}
	YY_BREAK
case 46:
YY_USER_ACTION
# line 179 "setups.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_input_file != yyin )
			{
			/* This can happen if we scan a file, yywrap() returns
			 * 1, and then later the user points yyin at a new
			 * file to resume scanning.  We have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input file.
			 */
			yy_current_buffer->yy_input_file = yyin;
			yy_n_chars = yy_current_buffer->yy_n_chars;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = yy_c_buf_p - yytext_ptr;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char *)
				yy_flex_realloc( (void *) b->yy_ch_buf,
						 b->yy_buf_size );

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_eof_status = EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	register char *yy_bp = yytext_ptr;

	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
		++yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 607 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 607 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 606);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
		yy_cp[-2] = '\n';

	*--yy_cp = (char) c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
	}


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *yy_c_buf_p;
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	yy_flex_free( (void *) b->yy_ch_buf );
	yy_flex_free( (void *) b );
	}


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
	{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = file ? isatty( fileno(file) ) : 0;

	b->yy_fill_buffer = 1;

	b->yy_eof_status = EOF_NOT_SEEN;
	}


#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		int new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}


static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}


static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}


#ifdef YY_USE_PROTOS
static void yy_fatal_error( const char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( 1 );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strcpy( char *s1, const char *s2 )
#else
static void yy_flex_strcpy( s1, s2 )
char *s1;
const char *s2;
#endif
	{
	while ( (*(s1++) = *(s2++)) )
		;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( unsigned int size )
#else
static void *yy_flex_alloc( size )
unsigned int size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, unsigned int size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
# line 179 "setups.l"


char *yval()
{
	char *cp;

	/* printf(":: %s\n", yytext); */

	for(cp = yytext; *cp != ':'; cp++) ;
	cp++;
	while(*cp == ' ' || *cp == '\t') cp++;

	return cp;
}

void cv_maze(val, maze)
char *val;
Mdesc **maze;
{
	int iCtr;
	extern int num_mdescs;
	extern Mdesc *mdesc;

	/* set to the random maze for now */
	*maze = (Mdesc *) NULL;

	/* need to search the mdesc[] to find the correct maze */
	for (iCtr = 0; iCtr < num_mdescs; iCtr++)
	{
		if (mdesc[iCtr].name)
		{
			if (! strcmp(mdesc[iCtr].name, val))
			{
				*maze = & mdesc[iCtr];
				break;
			}
		}
	}

	if (*maze == (Mdesc *) NULL)
	{
		fprintf(stderr, "Yo butthead!  Using the RANDOM maze.\n");
	}
}

void cv_str(val, store)
char *val;
char **store;
{
	*store = strdup(val);
}

void cv_kw2i(val, ival, arr, max)
char *val;
int *ival;
char *arr[];
int max;
{
	for(*ival = 0; *ival < max; *ival += 1) {
		if (!strcmp(arr[*ival], val)) return;
	}

	*ival = 0;
	return;
}

void cv_force(val, state)
char *val;
int state;
{
	extern char force_states[];
	int i;

	for(i = 0; i < MAX_SPECIALS; i++) {
		if (!strcmp(val, special_stat[i].type)) {
			force_states[i] = state;
			return;
		}
	}

	fprintf(stderr, "Couldn't force %s to %d\n", val, state);
}

void cv_bool(val, bool)
char *val;
int *bool;
{
	*bool = (*val == '1');

	if (*val == '1' || *val == '0' && '\0' == *(val+1)) return;

	fprintf(stderr, "Bizare bool ('%c%c", *val, *(val+1));
	fprintf(stderr, "')!\n");
}

void cv_flt(val, fval)
char *val;
FLOAT *fval;
{
	*fval = atof(val);
}

void cv_int(val, ival)
char *val;
int *ival;
{
	*ival = atoi(val);
}

int load_settings(pcFileName)
	char *pcFileName;
{
	extern char force_states[];
	int i;
	static int bCalled = FALSE;
	FILE *fp;

	if (! *pcFileName)
	{
		return (0);
	}

	fp = fopen(pcFileName, "r");
	if (!fp) {
		fprintf(stderr, "Can't find setups file\n");
		return (0);
	}

	for(i = 0; i < MAX_SPECIALS; i++) {
		force_states[i] = INT_FORCE_DONT;
	}

	if (bCalled)
	{
		yyrestart(fp);
		yylex();
	}
	else
	{
		yyin = fp;
		yylex();

		bCalled = TRUE;
	}

	fclose(fp);

	return(1);
}

/* Like ANSI strtok, but won't return an empty string */
char *strtoke(in, sep)
char *in, *sep;
{
	char *res;

	do {
		res = strtok(in, sep);
		in = NULL;
	} while(res && !*res);

	return res;
}
