#ifndef _Imakefile_Config_
#define _Imakefile_Config_

/**/#
/**/# Imakefile.config by Kurt Lidl (lidl@eng.umd.edu)
/**/#
/**/# This file (Imakefile.Config) is included in all the other Imakefiles
/**/# in the UMDENG X-Tank distribution.  Unless you are porting X-Tank to
/**/# a new (unsupported) platform, or adding new features to the game,
/**/# this should be the only file you need to edit to install the game.
/**/#
/**/# Things that still need work in the Imakefile system
/**/# 1) Testing on more platforms (Very important!)
/**/# 2) Addition of Motorola SYSV based config stuff
/**/#
/**/# If you have any problems *AT ALL* with the Imakefiles themselves,
/**/# please be sure to tell the folks at xtank@eng.umd.edu -- make sure
/**/# that you include the information requested in the BETA-README file.
/**/# Thanks.  We'd also love to hear of new robots and tank designs.


/**/# Things that might need to be defined, for your installation of xtank.


/**/# Put the path to the main xtank directory in quotes in the -DXTANK_DIR
/**/# below.  This is used as backup in case the environment variable
/**/# XTANK_DIR is not set at runtime.  The environment variable XTANK_DIR
/**/# is set in the shell script called xtank in the Bin directory.
/**/# You should change its value there also (to the same value).
/**/#
/**/# Graphics system:   X10 or X11 or AMIGA
/**/# The program will not work if X10 or AMIGA is set here.
/**/#
/**/# Operating system:  UNIX or AMIGA
/**/# Currently, xtank will not work if AMIGA is set here.
/**/#
/**/# Screen size:       S1024x864 or S640x400
/**/# The program will not work if S640x400 is set here.
/**/# If your screen is smaller than 1024x864, then some things will not
/**/# be visible
/**/#
/**/# -DSTINGY_REDRAW
/**/# Doesn't refresh objects that haven't moved.
/**/# Might break some some exposure handlers!
/**/# Much more robust and better localized than the original STINGY_REDRAW.
/**/# Could use some macro-izing or local variables to replace the VS_moved
/**/# and VS_rotated ideas.
/**/# Files affected: display.c
/**/#
/**/# -DBATCH_LINES
/**/# Caches draw_lines requests into one big Xdrawsegments.
/**/# Files affected: display.c x11.c x11.h
/**/#
/**/# -DBATCH_POINTS
/**/# Caches draw_point requests into one big Xdrawpoints.
/**/# Files affected: display.c x11.c x11.h
/**/#
/**/# -DFAST_EXPLOS
/**/# Makes faster, terser explosions by limiting the number of bitmaps
/**/# displayed.
/**/# Files affected: circle.obj double.obj exhaust.obj fiery.obj
/**/#                 soft.obj tink.obj
/**/#
/**/# -DNONAMETAGS
/**/# Makes vehicles (potentially) anonymous by removing their vehicle labels.
/**/# Files affected: display.c file.c init.c interface.c xtanklib.h
/**/#
/**/# -DKEYPAD_DETECT
/**/# Enables the keypad routines.  Currently cause weapon "n" to one shot
/**/# each key press on the numeric keypad. Weapon state (on/off) is restored
/**/# after firing.
/**/# Files affected: input.c x11.c graphics.h
/**/#
/**/# -DLOCK_GAME_CONTROLS
/**/# Locks out some luser controls (speed, sync...)
/**/# Strictly a local hack.
/**/# Files affected: animate.c input.c
/**/#

/**/# Everybody needs to know the following global things about xtank

DEFINES2        = -DX11 -DUNIX -DS1024x864 -DKEYPAD_DETECT -DNONAMETAGS \
		-DSTINGY_REDRAW -DBATCH_LINES -DBATCH_POINTS $(ARCH_DEFINES)

DEFINES         = -DXTANK_DIR=\"/src/pub/xtank\" $(DEFINES2) \
		-DALLDEFINES="\"$(DEFINES2)\""

/**/# Things that might need to be defined, for your particular machine
/**/# architecture, and installation of xtank.  The best place to add
/**/# any flags needed for your particular platform is the
/**/# EXTRA_DEFINES line.
/**/#
/**/# Thread package:    THREAD_MP or THREAD_SUNLWP or nothing
/**/#
/**/# The "standard" threads package is THREAD_MP, which runs on the
/**/# machines listed in thread.h.  To use it, add -DTHREAD_MP to the
/**/# architecture specfic options.
/**/#
/**/# There is an alternate threads package available on Suns which uses
/**/# the LWP library.  To use it, add -DTHREAD_SUNLWP to the architecture
/**/# specfic options.
/**/#
/**/# If you cannot get threads working using any of these methods, you
/**/# will not be able to have computer controlled vehicles.  Remove
/**/# the any thread flags from the architecture specfic options.
/**/# Other weird interactions may happen if no thread package is defined.
/**/#
/**/# X11R2 fonts:
/**/# If your machine is using X11R2 fontnames, instead of X11R3 fontnames,
/**/# add a -DX11R2FONTS to the appropriate compile line.
/**/#
/**/#
/**/# If you cannot get XMultiSync.c to compile, remove the -DMULTI_SYNC.
/**/# This will make multi-player games noticeably slower, though.
/**/#
/**/# If you want to restrict multi-player games to have all machines
/**/# on the same subnet of your network, add a -DCHECKNET.  Some sites
/**/# (and local InterNet NOC's) consider running xtank off the local subnet,
/**/# or over a campus or long-haul network a *bad thing*.  Xtank makes
/**/# a *lot* of network traffic, so be considerate of others.
/**/#
/**/#
/**/# If you are not able to get compile_module() to work in unix.c,
/**/# remove the -DDYNALOAD flag.  You will then not be able to add new
/**/# robot programs without recompiling.
/**/#
/**/# If you want to see some debugging information in unix.c,
/**/# add a -DDEBUG to the appropriate compile line.
/**/#
/**/#
/**/# If you need to use the auxiliary font add a -DNEED_AUX_FONT to the
/**/# correct compile line.

/**/# Start of System Dependent Things
/**/# (e.g. special options for your particular hardware and installation)

#ifdef i860Architecture
# ifdef i860
# undef i860
# define i860 i860
# endif
   ARCH_DEFINES =
   XTANK_TARGET = xtank.i860
#endif
#ifdef ApolloArchitecture
   ARCH_DEFINES = -DMULTI_SYNC -DDYNALOAD
   XTANK_TARGET = xtank.apollo
#endif
#ifdef HPArchitecture
   ARCH_DEFINES = -DMULTI_SYNC -DDYNALOAD -DTHREAD_MP
# ifdef hp9000s800
   XTANK_TARGET = xtank.hp9k8
# else
   XTANK_TARGET = xtank.hp9k3
# endif
#endif
#ifdef UltrixArchitecture
#ifdef MipsArchitecture
   ARCH_DEFINES = -DMULTI_SYNC -DTHREAD_MP
   XTANK_TARGET = xtank.mips-el
#endif
#endif
#ifdef RiscArchitecture 
/**/# IBM RS6000
   ARCH_DEFINES = -DMULTI_SYNC -DDYNALOAD -DTHREAD_MP
   XTANK_TARGET = xtank.rs6k
#endif
#ifdef RtArchitecture
   ARCH_DEFINES = -DMULTI_SYNC -DDYNALOAD
   XTANK_TARGET = xtank.rt
#endif
#ifdef SGIArchitecture
   ARCH_DEFINES = -D_BSD_SIGNALS -DMULTI_SYNC -DDYNALOAD
   XTANK_TARGET = xtank.sgi
#endif
#ifdef SunArchitecture
   ARCH_DEFINES = -DSUNOS4_0 -DTHREAD_SUNLWP -DMULTI_SYNC -DDYNALOAD
# ifdef SparcArchitecture
   XTANK_TARGET = xtank.sun4
# else
   XTANK_TARGET = xtank.sun3
# endif
#endif
#ifdef VaxArchitecture
   ARCH_DEFINES =
   XTANK_TARGET = xtank.vax
#endif

/**/# End of System Dependent Things

/*
 * SpecialObjectRule - generate rules to compile a file with special flags.
 */
#ifndef ExtraSpecialObjectRule
#define ExtraSpecialObjectRule(objs,depends,options)			@@\
objs:   depends								@@\
	$(RM) $@							@@\
	$(CC) $(ALLDEFINES) -c options $*.c
#endif /* ExtraSpecialObjectRule */

/*
 * NamedMakeSubdirs - generate rules to do makes in the given subdirectories.
 * If you want CDEBUGFLAGS passed along to subdirectories, provide a line like
 * the following in the appropriate Imakefile
 *
 *         #define PassCDebugFlags 'CDEBUGFLAGS=$(CDEBUGFLAGS)'
 */
#ifndef MyNamedMakeSubdirs
#define MyNamedMakeSubdirs(name,dirs) \
NamedTargetSubdirs(name,dirs,"making" name,PassCDebugFlags PassDefines,all)
#endif /* MyNamedMakeSubdirs */

#endif _Imakefile_Config_
