/* A lexical scanner generated by flex */

/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <osfcn.h>

/* use prototypes in function declarations */
#define YY_USE_PROTOS

/* the "const" storage-class-modifier is valid */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
#else
#include <stdlib.h>
#endif	/* __GNUC__ */

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#define const
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
/* we can't get here if it's an ANSI C compiler, or a C++ compiler,
 * so it's got to be a K&R compiler, and therefore there's no standard
 * place from which to include these definitions
 */
char *malloc();
int free();
int read();
#endif


/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* returned upon end-of-file */
#define YY_END_TOK 0

/* copy whatever the last rule matched to the standard output */

/* cast to (char *) is because for 8-bit chars, yytext is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yytext, yyleng, 1, yyout )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );
#define YY_NULL 0

/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 * 	if ( something_happens )
 *		YY_FATAL_ERROR( "oops, the something happened" );
 *	else
 *		everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, stderr ); \
		(void) putc( '\n', stderr ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1

/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* special action meaning "start processing a new file" */
#define YY_NEW_FILE \
	do \
		{ \
		yy_init_buffer( yy_current_buffer, yyin ); \
		yy_load_buffer_state(); \
		} \
	while ( 0 )

/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 

/* code executed at the end of each rule */
#define YY_BREAK break;

#define YY_END_OF_BUFFER_CHAR 0

#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) /* size of default input buffer */
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;

#define YY_CHAR char
# line 1 "setups.l"
#define INITIAL 0
# line 2 "setups.l"

#include <stdio.h>
#include <string.h>

#include "xtank.h"
#include "vehicle.h"
#include "setup.h"
#include "globals.h"
#include "team.h"
/* For "UNDEFINED" */
#include "interface.h"
#include "terminal.h"
#include "vstructs.h"

#define BUFLEN 256
#define SEP ",\t"

extern char *games_entries[];
extern Settings settings;
extern int num_terminals;
extern Terminal *terminal[];

char *yval(), *strtoke();
void cv_str(), cv_kw2i(), cv_bool(), cv_int(), cv_flt(), cv_maze(), cv_force();

# line 35 "setups.l"

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yytext
 */
#define YY_DO_BEFORE_ACTION \
	yytext = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yytext */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext )


struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_CHAR *yy_ch_buf;		/* input buffer */
    YY_CHAR *yy_buf_pos;	/* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters*/
    int yy_buf_size;	

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;		/* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

static YY_BUFFER_STATE yy_current_buffer;

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed */
static YY_CHAR yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */



#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

extern YY_CHAR *yytext;
extern int yyleng;
extern FILE *yyin, *yyout;

YY_CHAR *yytext;
int yyleng;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

#define YY_END_OF_BUFFER 48
typedef int yy_state_type;
static const short int yy_accept[616] =
    {   0,
       46,   46,   48,   46,    1,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   45,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,    4,   46,    3,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   44,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,    8,   46,   46,   46,   46,
       46,   46,   43,   46,   46,    9,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   41,

       11,   46,   15,   16,   46,   46,   46,   46,   46,   46,
        7,   46,    6,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       35,   46,   46,   46,   42,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   40,   46,
       46,   46,   33,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   17,   46,   46,
       46,   46,   46,   46,   46,    2,   46,   10,   34,   46,
       46,   46,   46,   46,   46,   46,   46,   12,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   31,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   30,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   32,
       46,   19,   46,   46,   46,   46,   46,    5,   26,   46,
       46,   39,   37,   46,   46,   46,   46,   46,   46,   46,
       46,   28,   46,   46,   46,   46,   36,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   25,   14,   38,
       46,   46,   46,   18,   46,   46,   46,   46,   46,   46,
       46,   46,   29,   13,   46,   46,   46,   46,   22,   46,

       46,   46,   46,   46,   27,   46,   46,   20,   46,   24,
       46,   23,   46,   21,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    6,    1,
        1,    1,    1,    1,    1,    7,    1,    8,    9,   10,
       11,   12,   10,   13,   10,   10,   10,   14,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,    1,   19,
       20,   21,    1,    1,    1,    1,   22,   23,   24,   25,
        1,   26,   27,   28,   29,   30,   31,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,
       45,   46,    1,   47,   48,   49,   50,   51,   52,   53,
       54,   55,    1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const short int yy_base[625] =
    {   0,
        0,   28, 1055,    0, 1056, 1049, 1008, 1007, 1011,   15,
     1018, 1017,    4,   11,   30,   28,    0,    1, 1006,    0,
      998,    0,    0,  993, 1002,   30,  997, 1001,  999,   16,
      998,   19,  991,  995,  984, 1005,  996,  990,   28, 1000,
     1000,  985,  986,  990,  985,   42,  979,  980,  982,  993,
        6, 1020,  980,  985,  987,  986,  977,  982, 1013,  980,
      979,   12,  971,  967,  976, 1007,  956,  965,  970,    3,
      958,  961,  960,  959,  969,  956,  960,  957,  963,  958,
      993,  952,  951,    0,  946,  957,  952,  987,  954,  985,
      974,  972,  972,  936,  952,  947,  950,  936,  933,  951,

      942,  928,  929,  956,  925,  941,  938,  922,  928,  928,
      964,  919,  962,  919,  921,  943,  922,  920,   20,  918,
      915,  924,   61,  953,  934,   23,  908,   24,  922,  918,
      920,  909,  902,  945,  903,  900,  942,  913,  904,  903,
      895,  902,  892,  897,  902,  918,  922,  908,  889,  901,
      887,  887,  916,  926,   83,  883,  878,  876,  893,  877,
      887,  876,  885,  896,  887,   88,  875,   89,  879,  884,
      868,  910,  864,  885,  907,  906,  893,  865,  860,  855,
      856,  868,  899,  898,  854,  853,   92,  865,  851,  848,
      864,  857,   93, 1056,  842,  861,  850,  848,  850,  857,

      852,  845,   61,  840,  882,   97,  839,  880,  100,  834,
      834,  866,  860,  874,  835,  851,  847,  824,  859,  836,
      835,  856,  820,  850,  840,  862,  825,  104,  819,  814,
      826,  819,  856,  105,  824,  809,  808,  824,  821,  805,
      817,  816,  814,  836,  835, 1056,  801, 1056,  833,  832,
      108,  798,  817,  798,  800,  805,  798,  109,  825,  834,
      113,  823,  791,  789,  803,  799,  829,  116,  784,  826,
      825,  780,  800,  817,  780,  779,  769,  784,  772,  806,
      784,  772,  803,  119,  120,  812,  123,  124,  127,  775,
      765,  761,  780,  769,  768,  128,  135,  791,  136,  139,

      764,  771,  774,  756, 1056,  768,  127,  779,  798,  767,
      788,  747,  751,  783,  760,  755,  145,  780,  748,  146,
      149,  150,  765,  158,  161,  788,  756,  742,  753,  733,
      750,  749,  781,  169,  172,  743,  779,  175,  775,  744,
      737,  738,  763,  732,  728,  729,  721,  748,  726,  759,
      725,  754,  183,  753,  721,  184,  187,  718,  196,  761,
      199,  756,  721,  749,  745, 1056,  695,  705,  686,  716,
      681,  670, 1056,  715,  669, 1056,  713,  659,  672,  664,
      660,  202,  641,  649,  687,  637,  636,  630,  658,  654,
      203,  206,  207,  623,  217,  229,  617,  655,  219, 1056,

     1056,  625, 1056, 1056,  616,  610,  593,  230,  599,  595,
     1056,  601, 1056,  630,  619,  584,  580,  241,  619,  579,
      133,  617,  569,  574,  594,  242,  249,  251,  263,  584,
     1056,  274,  285,  583, 1056,  554,  543,  546,  537,  297,
      526,  558,  557,  539,  264,  548,  547,  557,  531,  545,
      512,  509,  516,  481,  520,  523,  300,  522, 1056,  311,
      276,  322, 1056,  333,  277,  488,  479,  466,  500,  510,
      463,  287,  313,  464,  345,  324,  325, 1056,  458,  224,
      452,  468,  446,  476,  335, 1056,  356, 1056, 1056,  367,
      379,  390,  402,  475,  467,  441,  336, 1056,  465,  405,

      413,  434,  416,  428,  440,  466,  432,  423,  409,  404,
      414,  346,  452, 1056,  463,  474,  485,  432,  358,  369,
      420,  497,  370,  417,  409,  394, 1056,  508,  519,  530,
      390,  336,  353,  314,  338,  309,  542,  544,  555, 1056,
      566, 1056,  578,  581,  380,  592,  604, 1056, 1056,  392,
      606, 1056, 1056,  617,  272,  258,  260,  268,  393,  276,
      267, 1056,  628,  266,  639,  651, 1056,  662,  253,  674,
      676,  201,  201,  222,  193,  688,  414, 1056, 1056, 1056,
      690,  701,  712, 1056,  210,  198,  167,  429,  176,  179,
      724,  726, 1056, 1056,  441,  136,  738,  453, 1056,  172,

      741,  154,  161,  749, 1056,  154,  465, 1056,  131, 1056,
      752, 1056,  130, 1056, 1056,  761,  115,   82,   40,   28,
       20,    5,    4,    0
    } ;

static const short int yy_def[625] =
    {   0,
      616,  616,  615,  617,  615,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  618,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  618,  618,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  619,  617,  620,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  615,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  619,  619,  617,  620,  620,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  621,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  615,  617,  615,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  621,  621,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  622,  617,  617,  617,  617,

      617,  617,  617,  617,  615,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      623,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  622,  622,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  624,  623,
      623,  617,  617,  617,  617,  615,  617,  617,  617,  617,
      617,  617,  615,  617,  617,  615,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  624,  624,  615,

      615,  617,  615,  615,  617,  617,  617,  617,  617,  617,
      615,  617,  615,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      615,  617,  617,  617,  615,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  615,  617,
      617,  617,  615,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  615,  617,  617,
      617,  617,  617,  617,  617,  615,  617,  615,  615,  617,
      617,  617,  617,  617,  617,  617,  617,  615,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  615,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  615,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  615,
      617,  615,  617,  617,  617,  617,  617,  615,  615,  617,
      617,  615,  615,  617,  617,  617,  617,  617,  617,  617,
      617,  615,  617,  617,  617,  617,  615,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  615,  615,  615,
      617,  617,  617,  615,  617,  617,  617,  617,  617,  617,
      617,  617,  615,  615,  617,  617,  617,  617,  615,  617,

      617,  617,  617,  617,  615,  617,  617,  615,  617,  615,
      617,  615,  617,  615,    0,  615,  615,  615,  615,  615,
      615,  615,  615,  615
    } ;

static const short int yy_nxt[1112] =
    {   0,
      398,  119,    5,  119,  360,  333,  104,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   84,
      267,  155,   62,  155,  166,  168,  166,  168,  208,    6,
        5,   48,   45,   42,  105,   31,   46,   95,   43,   49,
      205,   44,   96,    7,    8,    9,   10,   11,   32,   12,
       13,   14,   15,   16,   17,   18,   19,    6,   20,   27,
       33,   35,   34,   39,   28,   63,   54,   40,   59,   70,
       60,   36,   41,   78,   37,   71,   38,   55,  159,  160,
       21,  161,  154,   79,  155,  194,  155,  162,  163,  206,
      209,  206,  209,  228,  234,  228,  234,  243,  206,  246,

      206,  209,  248,  209,  244,  268,  234,  268,  234,  289,
      296,  289,  296,  274,  299,   22,  299,  268,  305,  268,
      321,  322,  321,  322,  324,  325,  324,  325,  289,  334,
      289,  334,  614,  612,  326,  326,  335,  299,  335,  299,
      338,  344,  338,  337,  337,  345,  356,  359,  356,  359,
      361,  322,  361,  322,  346,  451,  610,  362,  362,  324,
      452,  324,  325,  608,  325,  364,  364,  607,  365,  365,
      334,  373,  334,  335,  605,  335,  338,  602,  338,  374,
      374,  599,  377,  377,  392,  356,  392,  356,  396,  598,
      396,  395,  395,  395,  395,  395,  395,  399,  596,  399,

      361,  400,  361,  418,  427,  418,  427,  392,  429,  392,
      429,  595,  594,  428,  428,  428,  428,  428,  428,  431,
      399,  435,  399,  432,  395,  395,  395,  395,  395,  395,
      396,  440,  396,  440,  589,  588,  433,  433,  433,  433,
      433,  433,  418,  457,  418,  457,  507,  587,  448,  448,
      427,  508,  427,  459,  586,  584,  458,  458,  428,  428,
      428,  428,  428,  428,  429,  475,  429,  475,  579,  578,
      460,  460,  460,  460,  460,  460,  431,  491,  493,  491,
      493,  462,  462,  462,  462,  462,  462,  463,  500,  577,
      500,  464,  433,  433,  433,  433,  433,  433,  440,  575,

      440,  457,  574,  457,  470,  470,  573,  487,  487,  487,
      487,  487,  487,  489,  501,  572,  501,  490,  460,  460,
      460,  460,  460,  460,  431,  504,  505,  504,  505,  462,
      462,  462,  462,  462,  462,  463,  513,  522,  513,  522,
      492,  492,  492,  492,  492,  492,  475,  537,  475,  537,
      560,  559,  503,  503,  503,  503,  503,  503,  514,  543,
      558,  543,  515,  487,  487,  487,  487,  487,  487,  489,
      544,  547,  544,  547,  516,  516,  516,  516,  516,  516,
      491,  566,  491,  566,  557,  556,  517,  517,  517,  517,
      517,  517,  463,  570,  576,  570,  576,  492,  492,  492,

      492,  492,  492,  493,  555,  493,  500,  550,  500,  518,
      518,  549,  524,  524,  501,  591,  501,  591,  527,  548,
      525,  525,  528,  503,  503,  503,  503,  503,  503,  504,
      597,  504,  597,  545,  542,  529,  529,  529,  529,  529,
      529,  505,  601,  505,  601,  536,  535,  530,  530,  530,
      530,  530,  530,  513,  604,  513,  604,  534,  533,  538,
      538,  538,  538,  538,  538,  514,  611,  532,  611,  531,
      539,  539,  539,  539,  539,  539,  489,  526,  523,  521,
      520,  516,  516,  516,  516,  516,  516,  540,  519,  512,
      511,  541,  517,  517,  517,  517,  517,  517,  522,  510,

      522,  509,  506,  502,  546,  546,  546,  546,  546,  546,
      527,  499,  498,  497,  496,  551,  551,  551,  551,  551,
      551,  552,  495,  494,  488,  486,  529,  529,  529,  529,
      529,  529,  553,  485,  484,  483,  554,  530,  530,  530,
      530,  530,  530,  537,  482,  537,  562,  481,  480,  561,
      561,  538,  538,  538,  538,  538,  538,  514,  479,  478,
      477,  476,  539,  539,  539,  539,  539,  539,  540,  474,
      473,  472,  471,  563,  563,  563,  563,  563,  563,  543,
      469,  543,  544,  468,  544,  564,  564,  467,  565,  565,
      565,  565,  565,  565,  567,  466,  465,  461,  568,  546,

      546,  546,  546,  546,  546,  547,  456,  547,  527,  455,
      454,  569,  569,  551,  551,  551,  551,  551,  551,  553,
      453,  450,  449,  447,  571,  571,  571,  571,  571,  571,
      540,  446,  445,  444,  443,  563,  563,  563,  563,  563,
      563,  580,  442,  441,  439,  581,  565,  565,  565,  565,
      565,  565,  566,  438,  566,  437,  436,  435,  582,  582,
      582,  582,  582,  582,  567,  434,  430,  426,  425,  583,
      583,  583,  583,  583,  583,  570,  424,  570,  553,  423,
      422,  585,  585,  571,  571,  571,  571,  571,  571,  576,
      421,  576,  580,  420,  419,  590,  590,  592,  592,  592,

      592,  592,  592,  593,  417,  416,  415,  414,  582,  582,
      582,  582,  582,  582,  567,  413,  412,  411,  410,  583,
      583,  583,  583,  583,  583,  591,  409,  591,  580,  408,
      407,  600,  600,  592,  592,  592,  592,  592,  592,  597,
      406,  597,  601,  405,  601,  603,  603,  404,  606,  606,
      604,  403,  604,  611,  402,  611,  609,  609,  401,  613,
      613,    4,    4,  400,  397,  394,  393,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  376,  375,  373,  372,  371,  370,  369,  368,  367,
      366,  363,  358,  357,  355,  354,  353,  352,  351,  350,

      349,  348,  347,  343,  342,  341,  340,  339,  336,  332,
      331,  330,  329,  328,  327,  323,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  298,  297,  295,
      294,  293,  292,  291,  290,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  273,
      272,  271,  270,  269,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  242,  241,  240,  239,
      238,  237,  236,  235,  233,  232,  231,  230,  229,  227,

      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  207,  204,  203,
      202,  201,  200,  199,  198,  197,  196,  195,  194,  193,
      192,  191,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  167,  165,  164,  158,  157,  156,
      153,  152,  151,  150,  149,  148,  147,  146,  145,  144,
      143,  142,  141,  140,  139,  138,  137,  136,  135,  134,
      133,  132,  131,  130,  129,  128,  127,  126,  125,  124,
      123,  122,  121,  120,  118,  117,  116,  115,  114,  113,

      112,  111,  110,  109,  108,  107,  106,  103,  102,  101,
      100,   99,   98,   97,   94,   93,   92,   91,   90,   89,
       88,   87,   86,   85,   83,   82,   81,   80,   77,   76,
       75,   74,   73,   72,   69,   68,   67,   66,   65,   64,
       61,   58,   57,   56,   53,   52,   50,   47,   30,   29,
       26,   25,   24,   23,  615,    3,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615
    } ;

static const short int yy_chk[1112] =
    {   0,
      624,   84,    1,   84,  623,  622,   70,   23,   23,   23,
       23,   23,   23,   51,   51,   51,   51,   51,   51,   51,
      621,  119,   32,  119,  126,  128,  126,  128,  620,    1,
        2,   20,   18,   17,   70,   13,   18,   62,   17,   20,
      619,   17,   62,    2,    2,    2,    2,    2,   13,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   10,
       14,   15,   14,   16,   10,   32,   26,   16,   30,   39,
       30,   15,   16,   46,   15,   39,   15,   26,  123,  123,
        2,  123,  618,   46,  155,  155,  155,  123,  123,  166,
      168,  166,  168,  187,  193,  187,  193,  203,  206,  206,

      206,  209,  209,  209,  203,  228,  234,  228,  234,  251,
      258,  251,  258,  234,  261,  617,  261,  268,  268,  268,
      284,  285,  284,  285,  287,  288,  287,  288,  289,  296,
      289,  296,  613,  609,  289,  289,  297,  299,  297,  299,
      300,  307,  300,  299,  299,  307,  317,  320,  317,  320,
      321,  322,  321,  322,  307,  421,  606,  322,  322,  324,
      421,  324,  325,  603,  325,  324,  324,  602,  325,  325,
      334,  334,  334,  335,  600,  335,  338,  596,  338,  335,
      335,  590,  338,  338,  353,  356,  353,  356,  357,  589,
      357,  356,  356,  356,  356,  356,  356,  359,  587,  359,

      361,  361,  361,  382,  391,  382,  391,  392,  393,  392,
      393,  586,  585,  392,  392,  392,  392,  392,  392,  395,
      399,  399,  399,  395,  395,  395,  395,  395,  395,  395,
      396,  408,  396,  408,  575,  574,  396,  396,  396,  396,
      396,  396,  418,  426,  418,  426,  480,  573,  418,  418,
      427,  480,  427,  428,  572,  569,  427,  427,  428,  428,
      428,  428,  428,  428,  429,  445,  429,  445,  564,  561,
      429,  429,  429,  429,  429,  429,  432,  461,  465,  461,
      465,  432,  432,  432,  432,  432,  432,  433,  472,  560,
      472,  433,  433,  433,  433,  433,  433,  433,  440,  558,

      440,  457,  557,  457,  440,  440,  556,  457,  457,  457,
      457,  457,  457,  460,  473,  555,  473,  460,  460,  460,
      460,  460,  460,  460,  462,  476,  477,  476,  477,  462,
      462,  462,  462,  462,  462,  464,  485,  497,  485,  497,
      464,  464,  464,  464,  464,  464,  475,  512,  475,  512,
      536,  535,  475,  475,  475,  475,  475,  475,  487,  519,
      534,  519,  487,  487,  487,  487,  487,  487,  487,  490,
      520,  523,  520,  523,  490,  490,  490,  490,  490,  490,
      491,  545,  491,  545,  533,  532,  491,  491,  491,  491,
      491,  491,  492,  550,  559,  550,  559,  492,  492,  492,

      492,  492,  492,  493,  531,  493,  500,  526,  500,  493,
      493,  525,  500,  500,  501,  577,  501,  577,  503,  524,
      501,  501,  503,  503,  503,  503,  503,  503,  503,  504,
      588,  504,  588,  521,  518,  504,  504,  504,  504,  504,
      504,  505,  595,  505,  595,  511,  510,  505,  505,  505,
      505,  505,  505,  513,  598,  513,  598,  509,  508,  513,
      513,  513,  513,  513,  513,  515,  607,  507,  607,  506,
      515,  515,  515,  515,  515,  515,  516,  502,  499,  496,
      495,  516,  516,  516,  516,  516,  516,  517,  494,  484,
      483,  517,  517,  517,  517,  517,  517,  517,  522,  482,

      522,  481,  479,  474,  522,  522,  522,  522,  522,  522,
      528,  471,  470,  469,  468,  528,  528,  528,  528,  528,
      528,  529,  467,  466,  458,  456,  529,  529,  529,  529,
      529,  529,  530,  455,  454,  453,  530,  530,  530,  530,
      530,  530,  530,  537,  452,  537,  538,  451,  450,  537,
      537,  538,  538,  538,  538,  538,  538,  539,  449,  448,
      447,  446,  539,  539,  539,  539,  539,  539,  541,  444,
      443,  442,  441,  541,  541,  541,  541,  541,  541,  543,
      439,  543,  544,  438,  544,  543,  543,  437,  544,  544,
      544,  544,  544,  544,  546,  436,  434,  430,  546,  546,

      546,  546,  546,  546,  546,  547,  425,  547,  551,  424,
      423,  547,  547,  551,  551,  551,  551,  551,  551,  554,
      422,  420,  419,  417,  554,  554,  554,  554,  554,  554,
      563,  416,  415,  414,  412,  563,  563,  563,  563,  563,
      563,  565,  410,  409,  407,  565,  565,  565,  565,  565,
      565,  565,  566,  406,  566,  405,  402,  398,  566,  566,
      566,  566,  566,  566,  568,  397,  394,  390,  389,  568,
      568,  568,  568,  568,  568,  570,  388,  570,  571,  387,
      386,  570,  570,  571,  571,  571,  571,  571,  571,  576,
      385,  576,  581,  384,  383,  576,  576,  581,  581,  581,

      581,  581,  581,  582,  381,  380,  379,  378,  582,  582,
      582,  582,  582,  582,  583,  377,  375,  374,  372,  583,
      583,  583,  583,  583,  583,  591,  371,  591,  592,  370,
      369,  591,  591,  592,  592,  592,  592,  592,  592,  597,
      368,  597,  601,  367,  601,  597,  597,  365,  601,  601,
      604,  364,  604,  611,  363,  611,  604,  604,  362,  611,
      611,  616,  616,  360,  358,  355,  354,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  337,  336,  333,  332,  331,  330,  329,  328,  327,
      326,  323,  319,  318,  316,  315,  314,  313,  312,  311,

      310,  309,  308,  306,  304,  303,  302,  301,  298,  295,
      294,  293,  292,  291,  290,  286,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  267,  266,  265,  264,  263,  262,  260,  259,  257,
      256,  255,  254,  253,  252,  250,  249,  247,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  233,
      232,  231,  230,  229,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  208,  207,  205,  204,  202,  201,  200,  199,
      198,  197,  196,  195,  192,  191,  190,  189,  188,  186,

      185,  184,  183,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  172,  171,  170,  169,  167,  165,  164,
      163,  162,  161,  160,  159,  158,  157,  156,  154,  153,
      152,  151,  150,  149,  148,  147,  146,  145,  144,  143,
      142,  141,  140,  139,  138,  137,  136,  135,  134,  133,
      132,  131,  130,  129,  127,  125,  124,  122,  121,  120,
      118,  117,  116,  115,  114,  113,  112,  111,  110,  109,
      108,  107,  106,  105,  104,  103,  102,  101,  100,   99,
       98,   97,   96,   95,   94,   93,   92,   91,   90,   89,
       88,   87,   86,   85,   83,   82,   81,   80,   79,   78,

       77,   76,   75,   74,   73,   72,   71,   69,   68,   67,
       66,   65,   64,   63,   61,   60,   59,   58,   57,   56,
       55,   54,   53,   52,   50,   49,   48,   47,   45,   44,
       43,   42,   41,   40,   38,   37,   36,   35,   34,   33,
       31,   29,   28,   27,   25,   24,   21,   19,   12,   11,
        9,    8,    7,    6,    3,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0

/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_CHAR *yy_c_buf_p = (YY_CHAR *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_CHAR c, YY_CHAR *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#define yy_new_buffer yy_create_buffer

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

YY_DECL
    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
	{
	YY_USER_INIT;

	if ( ! yy_start )
	    yy_start = 1;	/* first start state */

	if ( ! yyin )
	    yyin = stdin;

	if ( ! yyout )
	    yyout = stdout;

	if ( yy_current_buffer )
	    yy_init_buffer( yy_current_buffer, yyin );
	else
	    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_load_buffer_state();

	yy_init = 0;
	}

    while ( 1 )		/* loops until end-of-file is reached */
	{
	yy_cp = yy_c_buf_p;

	/* support of yytext */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 616 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 615 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;

yy_find_action:
	yy_act = yy_accept[yy_current_state];

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:	/* this label is used only to access EOF actions */


	switch ( yy_act )
	    {
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
# line 37 "setups.l"
{ }
	YY_BREAK
case 2:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 38 "setups.l"
{ }
	YY_BREAK
case 3:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 39 "setups.l"
{ cv_maze(yval(), &settings.mdesc); }
	YY_BREAK
case 4:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 40 "setups.l"
{ cv_kw2i(yval(), &settings.si.game,games_entries);}
	YY_BREAK
case 5:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 41 "setups.l"
{ cv_bool(yval(), &settings.point_bullets); }
	YY_BREAK
case 6:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 42 "setups.l"
{ cv_bool(yval(), &settings.si.ricochet); }
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 43 "setups.l"
{ cv_bool(yval(), &settings.si.rel_shoot); }
	YY_BREAK
case 8:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 44 "setups.l"
{ cv_bool(yval(), &settings.si.no_wear); }
	YY_BREAK
case 9:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 45 "setups.l"
{ cv_bool(yval(), &settings.si.restart); }
	YY_BREAK
case 10:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 46 "setups.l"
{ cv_bool(yval(), &settings.commentator); }
	YY_BREAK
case 11:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 47 "setups.l"
{ cv_bool(yval(), &settings.si.full_map); }
	YY_BREAK
case 12:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 48 "setups.l"
{ cv_bool(yval(), &settings.si.pay_to_play); }
	YY_BREAK
case 13:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 49 "setups.l"
{ cv_bool(yval(), &settings.robots_dont_win); }
	YY_BREAK
case 14:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 50 "setups.l"
{ cv_bool(yval(), &settings.max_armor_scale); }
	YY_BREAK
case 15:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 51 "setups.l"
{ cv_bool(yval(), &settings.si.no_nametags); }
	YY_BREAK
case 16:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 52 "setups.l"
{ cv_bool(yval(), &settings.si.no_radar); }
	YY_BREAK
case 17:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 53 "setups.l"
{ cv_bool(yval(), &settings.si.team_score); }
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 54 "setups.l"
{ cv_bool(yval(), &settings.si.player_teleport); }
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 55 "setups.l"
{ cv_bool(yval(), &settings.si.disc_teleport); }
	YY_BREAK
case 20:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 56 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_from_team); }
	YY_BREAK
case 21:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 57 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_from_neutral); }
	YY_BREAK
case 22:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 58 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_to_team); }
	YY_BREAK
case 23:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 59 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_to_neutral); }
	YY_BREAK
case 24:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 60 "setups.l"
{ cv_bool(yval(), &settings.si.teleport_any_to_any); }
	YY_BREAK
case 25:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 61 "setups.l"
{ cv_bool(yval(), &settings.si.war_goals_only); }
	YY_BREAK
case 26:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 62 "setups.l"
{ cv_bool(yval(), &settings.si.relative_disc); }
	YY_BREAK
case 27:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 63 "setups.l"
{ cv_bool(yval(), &settings.si.ultimate_own_goal); }
	YY_BREAK
case 28:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 64 "setups.l"
{ cv_int( yval(), &settings.si.winning_score); }
	YY_BREAK
case 29:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 65 "setups.l"
{ cv_int( yval(), &settings.si.outpost_strength); }
	YY_BREAK
case 30:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 66 "setups.l"
{ cv_flt( yval(), &settings.si.scroll_speed); }
	YY_BREAK
case 31:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 67 "setups.l"
{ cv_flt( yval(), &settings.si.box_slowdown); }
	YY_BREAK
case 32:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 68 "setups.l"
{ cv_flt( yval(), &settings.si.disc_friction); }
	YY_BREAK
case 33:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 69 "setups.l"
{ cv_flt( yval(), &settings.si.disc_speed); }
	YY_BREAK
case 34:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 70 "setups.l"
{ cv_flt( yval(), &settings.si.disc_damage); }
	YY_BREAK
case 35:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 71 "setups.l"
{ cv_flt( yval(), &settings.si.disc_heat); }
	YY_BREAK
case 36:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 72 "setups.l"
{ cv_flt( yval(), &settings.si.owner_slowdown); }
	YY_BREAK
case 37:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 73 "setups.l"
{ cv_flt( yval(), &settings.si.slip_friction); }
	YY_BREAK
case 38:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 74 "setups.l"
{ cv_flt( yval(), &settings.si.normal_friction); }
	YY_BREAK
case 39:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 75 "setups.l"
{ cv_int( yval(), &settings.si.shocker_walls); }
	YY_BREAK
case 40:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 76 "setups.l"
{ cv_int( yval(), &settings.difficulty); }
	YY_BREAK
case 41:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 77 "setups.l"
{ cv_force(yval(), INT_FORCE_ON); }
	YY_BREAK
case 42:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 78 "setups.l"
{ cv_force(yval(), INT_FORCE_OFF); }
	YY_BREAK
case 43:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 80 "setups.l"
{
				/* we should load $2 if prog $1 doesn't exist */
				char *progname;
				char *progpath;
				int junk;
				
				strtoke(yytext, SEP);		/* "Program:	" */
				progname = strtoke(NULL, SEP);
				progpath = strtoke(NULL, SEP);

				if (DESC_LOADED != find_pdesc(progname, &junk)) {
					load_prog_desc(progpath, TRUE);
				}
}
	YY_BREAK
case 44:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 95 "setups.l"
{ /* Who cares... */ }
	YY_BREAK
case 45:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 97 "setups.l"
{
			/* V#N: owner->name, disp, vptr->name, team, #progs, progs... */
				char buf[BUFLEN];
				char *cvn;
				char *cplayer;
				char *cdisp;
				char *cvname;
				char *cteam;
				char *cnprogs;
				char *cprog1;
				extern Combatant combatant[];
				extern char *teams_entries[];
				int vn, nprogs;
				int num;
				int i;

				cvn		=	2+strtoke(yytext, SEP);
				cplayer	=	strtoke(NULL, SEP);
				cdisp	=	strtoke(NULL, SEP);
				cvname	=	strtoke(NULL, SEP);
				cteam	=	strtoke(NULL, SEP);
				cnprogs	=	strtoke(NULL, SEP);
				cprog1	=	strtoke(NULL, SEP);
				
				/* printf("%s, %s, %s, %s, %s, %s, %s\n",
					cvn, cplayer, cdisp, cvname, cteam, cnprogs, cprog1); */
				
				vn = atoi(cvn);

				/* See get_player_info */

				combatant[vn].num_players = 1;
				strcpy(combatant[vn].name, cplayer);
				combatant[vn].player[0] = UNDEFINED;
				for(i = 0; i < num_terminals; i++) {
					if (strcmp(terminal[i]->player_name, cplayer)) continue;
					combatant[vn].player[0] = i;
				}

				if (DESC_LOADED == make_vdesc(cvname, &num)) {
					combatant[vn].vdesc = num;
				}
				else
				{
					fprintf(stderr, "Warning!  Cannot load vehicle %s\n",
							cvname);
				}

				nprogs = atoi(cnprogs);
				combatant[vn].program[0] = UNDEFINED;
				combatant[vn].num_programs = 0;
				if (nprogs && DESC_LOADED == find_pdesc(cprog1, &num)) {
					combatant[vn].num_programs = atoi(cnprogs);
					combatant[vn].program[0] = num;
				}

				/* printf("(%d: %s/%d)\n", combatant[vn].num_programs,
					cprog1, combatant[vn].program[0]); */

				cv_kw2i(cteam, &num, teams_entries, MAX_TEAMS);
				combatant[vn].team = num;

				combatant_to_grid(combatant + vn, atoi(cvn));
			}
	YY_BREAK
case 46:
# line 162 "setups.l"
{
				fprintf(stderr, "Bad setups file (%s)\n", yytext);
				exit(2);
			}
	YY_BREAK
case 47:
# line 167 "setups.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yytext - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yytext + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yytext + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yytext,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yytext + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yytext + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#ifdef FLEX_DEBUG
		printf( "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()

    {
    register YY_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_CHAR *source = yytext - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yytext;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yytext begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yytext = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

static yy_state_type yy_get_previous_state()

    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp;

    register YY_CHAR *yy_bp = yytext;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;

    for ( yy_cp = yytext + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 616 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	}

    return ( yy_current_state );
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif

    {
    register int yy_is_jam;
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 616 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 615);

    return ( yy_is_jam ? 0 : yy_current_state );
    }


#ifdef YY_USE_PROTOS
static void yyunput( YY_CHAR c, register YY_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_CHAR c;
register YY_CHAR *yy_bp;
#endif

    {
    register YY_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yytext again */
    }


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif

    {
    int c;
    YY_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yytext = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yytext + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;

#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yytext + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif

    {
    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    yy_init_buffer( b, file );

    return ( b );
    }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
# line 167 "setups.l"


char *yval()
{
	char *cp;

	/* printf(":: %s\n", yytext); */

	for(cp = yytext; *cp != ':'; cp++) ;
	cp++;
	while(*cp == ' ' || *cp == '\t') cp++;

	return cp;
}

void cv_maze(val, maze)
char *val;
Mdesc **maze;
{
	int iCtr;
	extern int num_mdescs;
	extern Mdesc *mdesc;

	/* set to the random maze for now */
	*maze = (Mdesc *) NULL;

	/* need to search the mdesc[] to find the correct maze */
	for (iCtr = 0; iCtr < num_mdescs; iCtr++)
	{
		if (mdesc[iCtr].name)
		{
			if (! strcmp(mdesc[iCtr].name, val))
			{
				*maze = & mdesc[iCtr];
				break;
			}
		}
	}

	if (*maze == (Mdesc *) NULL)
	{
		fprintf(stderr, "Yo butthead!  Using the RANDOM maze.\n");
	}
}

void cv_str(val, store)
char *val;
char **store;
{
	*store = strdup(val);
}

void cv_kw2i(val, ival, arr, max)
char *val;
int *ival;
char *arr[];
int max;
{
	for(*ival = 0; *ival < max; *ival += 1) {
		if (!strcmp(arr[*ival], val)) return;
	}

	*ival = 0;
	return;
}

void cv_force(val, state)
char *val;
int state;
{
	extern char force_states[];
	int i;

	for(i = 0; i < MAX_SPECIALS; i++) {
		if (!strcmp(val, special_stat[i].type)) {
			force_states[i] = state;
			return;
		}
	}

	fprintf(stderr, "Couldn't force %s to %d\n", val, state);
}

void cv_bool(val, bool)
char *val;
int *bool;
{
	*bool = (*val == '1');

	if (*val == '1' || *val == '0' && '\0' == *(val+1)) return;

	fprintf(stderr, "Bizare bool ('%c%c", *val, *(val+1));
	fprintf(stderr, "')!\n");
}

void cv_flt(val, fval)
char *val;
FLOAT *fval;
{
	*fval = atof(val);
}

void cv_int(val, ival)
char *val;
int *ival;
{
	*ival = atoi(val);
}

int load_settings(pcFileName)
	char *pcFileName;
{
	extern char force_states[];
	int i;
	static int bCalled = FALSE;
	FILE *fp;

	if (! *pcFileName)
	{
		return (0);
	}

	fp = fopen(pcFileName, "r");
	if (!fp) {
		fprintf(stderr, "Can't find setups file\n");
		return (0);
	}

	for(i = 0; i < MAX_SPECIALS; i++) {
		force_states[i] = INT_FORCE_DONT;
	}

	if (bCalled)
	{
		yyrestart(fp);
		yylex();
	}
	else
	{
		yyin = fp;
		yylex();

		bCalled = TRUE;
	}

	fclose(fp);

	return(1);
}

/* Like ANSI strtok, but won't return an empty string */
char *strtoke(in, sep)
char *in, *sep;
{
	char *res;

	do {
		res = strtok(in, sep);
		in = NULL;
	} while(res && !*res);

	return res;
}
