/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /vol/bsdi/MASTER/BSDI_OS/usr.bin/lex/skel.c,v 1.1 1994/01/12 11:34:49 donn Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN ss_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((ss_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE ssrestart( ssin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct ss_buffer_state *YY_BUFFER_STATE;

extern int ssleng;
extern FILE *ssin, *ssout;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		ssless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the ssless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define ssless(n) \
	do \
		{ \
		/* Undo effects of setting up sstext. */ \
		*ss_cp = ss_hold_char; \
		ss_c_buf_p = ss_cp = ss_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up sstext again */ \
		} \
	while ( 0 )

#define unput(c) ssunput( c, sstext_ptr )


struct ss_buffer_state
	{
	FILE *ss_input_file;

	char *ss_ch_buf;		/* input buffer */
	char *ss_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int ss_buf_size;

	/* Number of characters read into ss_ch_buf, not including EOB
	 * characters.
	 */
	int ss_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int ss_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int ss_fill_buffer;

	/* Whether we've seen an EOF on this buffer. */
	int ss_eof_status;
#define EOF_NOT_SEEN 0
	/* "Pending" happens when the EOF has been seen but there's still
	 * some text to process.  Note that when we actually see the EOF,
	 * we switch the status back to "not seen" (via ssrestart()), so
	 * that the user can continue scanning by just pointing ssin at
	 * a new input file.
	 */
#define EOF_PENDING 1
	};

static YY_BUFFER_STATE ss_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER ss_current_buffer


/* ss_hold_char holds the character lost when sstext is formed. */
static char ss_hold_char;

static int ss_n_chars;		/* number of characters read into ss_ch_buf */


int ssleng;

/* Points to current character in buffer. */
static char *ss_c_buf_p = (char *) 0;
static int ss_init = 1;		/* whether we need to initialize */
static int ss_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh ssin.  A bit of a hack ...
 */
static int ss_did_buffer_switch_on_eof;

static void ssunput YY_PROTO(( int c, char *buf_ptr ));
void ssrestart YY_PROTO(( FILE *input_file ));
void ss_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void ss_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE ss_create_buffer YY_PROTO(( FILE *file, int size ));
void ss_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void ss_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

static int ss_start_stack_ptr = 0;
static int ss_start_stack_depth = 0;
static int *ss_start_stack = 0;
static void ss_push_state YY_PROTO(( int new_state ));
static void ss_pop_state YY_PROTO(( void ));
static int ss_top_state YY_PROTO(( void ));

#ifndef sstext_ptr
static void ss_flex_strcpy YY_PROTO(( char *, const char * ));
#endif

static void *ss_flex_alloc YY_PROTO(( unsigned int ));
static void *ss_flex_realloc YY_PROTO(( void *ptr, unsigned int ));
static void ss_flex_free YY_PROTO(( void * ));

#define ss_new_buffer ss_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
typedef int ss_state_type;
FILE *ssin = (FILE *) 0, *ssout = (FILE *) 0;
extern char *sstext;
#define sstext_ptr sstext

#ifdef __cplusplus
static int ssinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

static ss_state_type ss_get_previous_state YY_PROTO(( void ));
static ss_state_type ss_try_NUL_trans YY_PROTO(( ss_state_type current_state ));
static int ss_get_next_buffer YY_PROTO(( void ));
static void ss_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up sstext.
 */
#define YY_DO_BEFORE_ACTION \
	sstext_ptr = ss_bp; \
	ssleng = ss_cp - ss_bp; \
	ss_hold_char = *ss_cp; \
	*ss_cp = '\0'; \
	ss_c_buf_p = ss_cp;

#define YY_END_OF_BUFFER 58
static const short int ss_accept[668] =
    {   0,
       56,   56,   58,   56,   55,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
        2,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   36,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,    3,   56,
       56,   56,   56,    1,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   10,   56,   56,   56,   56,   56,   56,   38,   56,
       56,   56,   56,   56,   56,   56,   21,   56,   56,   56,
       56,   56,   56,   56,   56,   40,   20,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   12,   19,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       14,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   11,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   15,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   16,   37,   35,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,    5,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   54,   56,
       56,   56,   56,   56,   56,   56,   56,    8,   13,   56,
       56,   56,   56,   56,   56,   56,   56,   50,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   53,   56,   56,    6,   52,   56,    9,    4,    7,
       56,   17,   56,   56,   56,   18,   56,   56,   56,   56,
       56,   56,   51,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   41,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   45,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   46,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   49,   56,   48,   56,   56,
       56,   56,   56,   56,   56,   47,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   26,   27,   28,   29,   30,   56,   39,
       56,   56,   56,   56,   33,   24,   56,   56,   43,   56,
       44,   56,   56,   56,   56,   25,   56,   56,   56,   56,
       56,   34,   56,   56,   56,   56,   22,   42,   56,   56,
       31,   56,   32,   56,   56,   23,    0
    } ;

static const int ss_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    4,    5,    6,
        7,    8,    1,    1,    1,    1,    1,    9,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,    1,   11,   12,   13,   14,

       15,   16,   17,   18,   19,    1,   20,   21,   22,   23,
       24,   25,    1,   26,   27,   28,   29,   30,   31,   32,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int ss_meta[33] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static const short int ss_base[724] =
    {   0,
      783,    0,  785,    0,  787,   20,  763,  772,   24,   13,
       18,   16,   37,  763,   38,   36,  752,  754,   37,   47,
      768,  756,  762,  761,    0,  756,  752,  751,   46,  749,
      749,  743,  754,  754,  749,  755,  750,  749,  752,  736,
      750,  749,  742,  734,  736,  729,  744,  737,  729,  743,
      728,  730,  725,  735,  734,  731,  726,  721,  732,  719,
      722,  722,  728,  724,  713,  712,  708,  709,  710,   72,
      719,  718,  721,  718,  706,  706,  715,  704,  702,  700,
      694,  712,  707,  698,  703,  694,  707,  702,  712,  698,
      697,  698,  686,  689,  688,  694,  695,  679,  684,  676,

      683,  676,  691,  689,  672,  669,  687,  671,  684,  683,
      682,  681,  680,  672,   57,  660,  685,  657,  670,  674,
      661,  673,  672,  657,  669,  676,  657,  661,  649,  651,
      671,  652,  669,  661,   60,  649,  655,  652,  651,  645,
      638,  635,  652,  634,  647,  635,  656,   50,  647,  647,
      653,  631,  638,  637,  636,  635,  634,  633,  645,  623,
      619,  642,  616,  633,   58,  631,  638,  637,  614,   60,
      635,  621,  609,  625,  609,  630,  616,  627,   70,  627,
      626,  612,  611,  607,  596,  597,  613,  612,  611,  604,
      597,  596,  593,  613,  594,  602,   61,  610,  609,  601,

      577,  576,  575,  574,  573,  594,  601,  587,  582,  597,
       84,  571,  596,  577,  585,  580,  592,  591,  569,  571,
      579,  586,   91,  560,  578,  584,  562,  581,   93,  555,
      787,  580,  579,  548,  551,  563,  568,  567,  573,  572,
      571,  540,  556,  555,  559,  565,   95,  558,  540,  545,
      553,  561,  559,   97,  559,  535,  534,  533,  532,  531,
      540,  551,   99,  522,  539,  787,  541,  548,  540,  522,
      515,  543,  101,  542,  103,  535,  534,  516,  787,  532,
      538,  537,  529,  787,  528,  533,  105,  532,  107,  509,
      524,  504,  529,  528,  527,  526,  525,  501,  516,  514,

       88,  787,  521,  499,  512,  494,  516,  115,  787,  516,
      496,  495,  494,  493,  492,  480,  787,  501,  500,  494,
      505,  117,  505,  483,  480,  787,  787,  502,  501,  479,
      499,  498,  496,  119,  496,  495,  787,  787,  475,  493,
      485,  491,  490,  488,  121,  487,  123,  486,  125,  467,
      485,  468,  461,  468,  468,  458,  479,  461,  477,  455,
      787,  474,  127,  452,  451,  450,  449,  448,  446,  446,
      454,  436,  787,  465,  447,  444,  462,  461,  443,  459,
      457,  129,  787,  457,  456,  433,  454,  453,  451,  131,
      450,  133,  787,  787,  787,  428,  449,  431,  439,  432,

      426,  422,  442,  135,  421,  441,  423,  787,  414,  413,
      412,  411,  410,  415,  404,  402,  408,  429,  137,  408,
      406,  426,  139,  425,  141,  404,  423,  143,  787,  422,
      145,  421,  147,  396,  419,  149,  419,  787,  787,  393,
      416,  151,  390,  406,  407,  391,  404,  787,  396,  409,
      153,  388,  391,  390,  389,  388,  387,  381,  381,  378,
      381,  787,  384,  373,  787,  787,  382,  787,  787,  787,
      379,  787,  394,  155,  377,  787,  385,  372,  391,  381,
      373,  381,  787,  372,  364,  363,  362,  361,  360,  356,
      367,  360,  356,  370,  359,  368,  352,  787,  351,  129,

      352,  371,  358,  347,  368,  360,  345,  344,  343,  342,
      341,  344,  336,  337,  333,  357,  334,  355,  333,  332,
      339,  342,  328,  348,  159,  331,  321,  346,  345,  337,
      336,  335,  334,  333,  317,  331,  312,  319,  335,  313,
      333,  325,  324,  314,  310,  321,  787,  306,  319,  324,
      161,  324,  323,  322,  321,  320,  319,  297,  317,  299,
      293,  313,  163,  306,  311,  165,  311,  310,  292,  289,
      307,  291,  305,  787,  303,  167,  303,  302,  301,  300,
      299,  291,  297,  274,  274,  787,  294,  787,  293,  292,
      280,  283,  289,  281,  287,  787,  285,  169,   35,  171,

       38,  173,   41,  175,   51,  177,   56,   85,  179,   67,
      104,  113,  180,  182,  183,  185,  168,  188,  188,  190,
      192,  192,  194,  787,  787,  787,  787,  787,  196,  787,
      190,  198,  198,  200,  787,  787,  189,  203,  787,  204,
      787,  204,  206,  208,  209,  787,  203,  210,  212,  213,
      215,  787,  217,  217,  219,  221,  787,  787,  221,  223,
      787,  225,  787,  225,  227,  787,  787,  230,  232,  233,
      234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  256,  257,  258,  259,  260,  261,  262,  263,

      264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
      274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
      284,  285,  286
    } ;

static const short int ss_def[724] =
    {   0,
      668,  667,  667,  669,  667,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  670,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  671,  669,  669,  669,  669,  669,  669,  669,  669,
      672,  669,  669,  669,  669,  673,  669,  670,  670,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  674,  669,  669,  669,  669,  675,  669,

      669,  669,  669,  669,  669,  669,  676,  669,  669,  671,
      671,  669,  669,  669,  669,  669,  677,  678,  669,  669,
      669,  672,  672,  669,  669,  669,  669,  673,  673,  669,
      667,  679,  680,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  674,  674,  669,  669,  669,
      669,  681,  675,  675,  669,  669,  669,  669,  669,  669,
      669,  676,  676,  669,  669,  667,  669,  682,  669,  669,
      669,  677,  677,  678,  678,  669,  669,  669,  667,  669,
      669,  683,  669,  667,  669,  679,  679,  680,  680,  669,
      669,  669,  669,  669,  684,  685,  686,  669,  669,  669,

      669,  667,  669,  669,  669,  669,  681,  681,  667,  687,
      669,  669,  669,  669,  669,  669,  667,  669,  669,  669,
      682,  682,  669,  669,  669,  667,  667,  669,  669,  669,
      669,  688,  683,  683,  669,  669,  667,  667,  669,  669,
      669,  689,  690,  684,  684,  685,  685,  686,  686,  669,
      669,  669,  669,  669,  669,  669,  691,  669,  669,  669,
      667,  687,  687,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  667,  692,  669,  669,  693,  694,  669,  695,
      688,  688,  667,  696,  697,  669,  698,  669,  689,  689,
      690,  690,  667,  667,  667,  669,  699,  669,  669,  669,

      669,  669,  691,  691,  669,  700,  669,  667,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  692,  692,  669,
      669,  693,  693,  694,  694,  669,  695,  695,  667,  696,
      696,  697,  697,  669,  698,  698,  701,  667,  667,  669,
      699,  699,  669,  669,  669,  669,  669,  667,  669,  700,
      700,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  667,  669,  669,  667,  667,  669,  667,  667,  667,
      669,  667,  701,  701,  669,  667,  669,  669,  669,  669,
      669,  669,  667,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  667,  669,  669,

      669,  702,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  702,  702,  669,  669,  703,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  704,  669,
      705,  669,  669,  669,  669,  669,  667,  669,  669,  703,
      703,  706,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  704,  704,  669,  705,  705,  669,  669,  669,  669,
      669,  669,  669,  667,  706,  706,  707,  708,  709,  710,
      711,  669,  712,  669,  669,  667,  669,  667,  713,  714,
      669,  669,  715,  669,  716,  667,  707,  707,  708,  708,

      709,  709,  710,  710,  711,  711,  669,  712,  712,  669,
      669,  717,  713,  713,  714,  714,  669,  669,  715,  715,
      669,  716,  716,  667,  667,  667,  667,  667,  718,  667,
      669,  669,  717,  717,  667,  667,  669,  719,  667,  720,
      667,  718,  718,  669,  721,  667,  669,  719,  719,  720,
      720,  667,  722,  721,  721,  669,  667,  667,  722,  722,
      667,  723,  667,  723,  723,  667,    0,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667
    } ;

static const short int ss_nxt[820] =
    {   0,
        4,    4,    5,    4,    4,    4,    4,    4,    4,    4,
        6,    7,    8,    9,   10,   11,   12,   13,    4,   14,
       15,   16,   17,    4,   18,   19,   20,   21,   22,   23,
       24,    4,   26,   33,   31,   34,   38,  625,   36,   39,
      626,   27,   32,  627,   35,   28,   37,   40,   46,   41,
       47,   42,   50,  628,   51,   54,   67,  629,   43,   48,
       55,   56,   44,   49,   68,  159,  160,   57,  181,  182,
       58,  179,  231,  195,   59,  109,  110,  111,  112,  113,
      196,  214,  114,  220,  250,  211,  266,  630,  215,  631,
      221,  251,  223,  279,  229,  284,  247,  302,  254,  309,

      263,  317,  273,  326,  275,  327,  287,  337,  289,  338,
      353,  354,  632,  355,  634,  356,  308,  361,  322,  373,
      334,  383,  345,  393,  347,  394,  349,  395,  363,  408,
      382,  429,  390,  438,  392,  439,  404,  448,  419,  462,
      423,  465,  425,  466,  428,  468,  431,  469,  433,  470,
      436,  472,  442,  476,  451,  483,  474,  498,  521,  522,
      525,  547,  551,  574,  563,  586,  566,  588,  576,  596,
      598,  624,  600,  625,  602,  626,  604,  627,  606,  628,
      609,  630,  635,  614,  635,  636,  616,  636,  637,  638,
      639,  620,  639,  640,  641,  623,  641,  643,  644,  645,

      646,  634,  646,  647,  649,  651,  652,  643,  652,  653,
      655,  656,  657,  649,  657,  658,  651,  658,  660,  661,
      655,  661,  662,  663,  660,  663,  665,  666,  665,  666,
        4,    4,   25,  178,  210,  222,  228,  246,  253,  262,
      272,  274,  286,  288,  307,  321,  333,  344,  346,  348,
      362,  381,  389,  391,  403,  418,  422,  424,  427,  430,
      432,  435,  441,  450,  473,  524,  550,  562,  565,  575,
      597,  599,  601,  603,  605,  608,  613,  615,  619,  622,
      633,  642,  648,  650,  654,  659,  664,  624,  623,  621,
      620,  618,  617,  616,  614,  612,  611,  610,  609,  607,

      606,  604,  602,  600,  598,  596,  595,  594,  593,  592,
      591,  590,  589,  588,  587,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  564,  563,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  523,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,

      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  472,  471,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  449,  448,  447,  446,  445,  444,  443,
      442,  440,  439,  438,  437,  436,  434,  433,  431,  429,
      428,  426,  425,  423,  421,  420,  419,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      393,  392,  390,  388,  387,  386,  385,  384,  383,  382,

      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  361,  360,
      359,  358,  357,  352,  351,  350,  349,  347,  345,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  332,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  287,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  273,  271,  270,  269,  268,  267,  266,

      265,  264,  263,  261,  260,  259,  258,  257,  256,  255,
      254,  252,  249,  248,  247,  245,  244,  243,  242,  241,
      240,  239,  238,  237,  236,  235,  234,  233,  232,  231,
      230,  229,  227,  226,  225,  224,  223,  219,  218,  217,
      216,  213,  212,  211,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  197,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  180,
      179,  177,  176,  175,  174,  173,  172,  171,  170,  169,
      168,  167,  166,  165,  164,  163,  162,  161,  158,  157,
      156,  155,  154,  153,  152,  151,  150,  149,  148,  147,

      146,  145,  144,  143,  142,  141,  140,  139,  138,  137,
      136,  135,  134,  133,  132,  131,  130,  129,  128,  127,
      126,  125,  124,  123,  122,  121,  120,  119,  118,  117,
      116,  115,  108,  107,  106,  105,  104,  103,  102,  101,
      100,   99,   98,   97,   96,   95,   94,   93,   92,   91,
       90,   89,   88,   87,   86,   85,   84,   83,   82,   81,
       80,   79,   78,   77,   76,   75,   74,   73,   72,   71,
       70,   69,   66,   65,   64,   63,   62,   61,   60,   53,
       52,   45,   30,   29,  667,    5,    3,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667
    } ;

static const short int ss_chk[820] =
    {   0,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    6,   10,    9,   10,   12,  599,   11,   12,
      601,    6,    9,  603,   10,    6,   11,   13,   15,   13,
       15,   13,   16,  605,   16,   19,   29,  607,   13,   15,
       19,   20,   13,   15,   29,  115,  115,   20,  135,  135,
       20,  179,  179,  148,   20,   70,   70,   70,   70,   70,
      148,  165,   70,  170,  197,  211,  211,  608,  165,  610,
      170,  197,  223,  223,  229,  229,  247,  247,  254,  254,

      263,  263,  273,  273,  275,  275,  287,  287,  289,  289,
      301,  301,  611,  301,  612,  301,  308,  308,  322,  322,
      334,  334,  345,  345,  347,  347,  349,  349,  363,  363,
      382,  382,  390,  390,  392,  392,  404,  404,  419,  419,
      423,  423,  425,  425,  428,  428,  431,  431,  433,  433,
      436,  436,  442,  442,  451,  451,  474,  474,  500,  500,
      525,  525,  551,  551,  563,  563,  566,  566,  576,  576,
      598,  598,  600,  600,  602,  602,  604,  604,  606,  606,
      609,  609,  613,  614,  614,  615,  616,  616,  617,  618,
      619,  620,  620,  621,  622,  623,  623,  629,  631,  632,

      633,  634,  634,  637,  638,  640,  642,  643,  643,  644,
      645,  647,  648,  649,  649,  650,  651,  651,  653,  654,
      655,  655,  656,  659,  660,  660,  662,  664,  665,  665,
      668,  668,  669,  670,  671,  672,  673,  674,  675,  676,
      677,  678,  679,  680,  681,  682,  683,  684,  685,  686,
      687,  688,  689,  690,  691,  692,  693,  694,  695,  696,
      697,  698,  699,  700,  701,  702,  703,  704,  705,  706,
      707,  708,  709,  710,  711,  712,  713,  714,  715,  716,
      717,  718,  719,  720,  721,  722,  723,  597,  595,  594,
      593,  592,  591,  590,  589,  587,  585,  584,  583,  582,

      581,  580,  579,  578,  577,  575,  573,  572,  571,  570,
      569,  568,  567,  565,  564,  562,  561,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  550,  549,  548,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  499,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  482,
      481,  480,  479,  478,  477,  475,  473,  471,  467,  464,

      463,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  450,  449,  447,  446,  445,  444,  443,  441,  440,
      437,  435,  434,  432,  430,  427,  426,  424,  422,  421,
      420,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  407,  406,  405,  403,  402,  401,  400,  399,  398,
      397,  396,  391,  389,  388,  387,  386,  385,  384,  381,
      380,  379,  378,  377,  376,  375,  374,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  362,  360,  359,  358,
      357,  356,  355,  354,  353,  352,  351,  350,  348,  346,
      344,  343,  342,  341,  340,  339,  336,  335,  333,  332,

      331,  330,  329,  328,  325,  324,  323,  321,  320,  319,
      318,  316,  315,  314,  313,  312,  311,  310,  307,  306,
      305,  304,  303,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  288,  286,  285,  283,  282,  281,
      280,  278,  277,  276,  274,  272,  271,  270,  269,  268,
      267,  265,  264,  262,  261,  260,  259,  258,  257,  256,
      255,  253,  252,  251,  250,  249,  248,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  230,  228,  227,  226,  225,  224,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  210,

      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  196,  195,  194,  193,  192,  191,  190,  189,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  178,
      177,  176,  175,  174,  173,  172,  171,  169,  168,  167,
      166,  164,  163,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  147,  146,  145,
      144,  143,  142,  141,  140,  139,  138,  137,  136,  134,
      133,  132,  131,  130,  129,  128,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  118,  117,  116,  114,  113,
      112,  111,  110,  109,  108,  107,  106,  105,  104,  103,

      102,  101,  100,   99,   98,   97,   96,   95,   94,   93,
       92,   91,   90,   89,   88,   87,   86,   85,   84,   83,
       82,   81,   80,   79,   78,   77,   76,   75,   74,   73,
       72,   71,   69,   68,   67,   66,   65,   64,   63,   62,
       61,   60,   59,   58,   57,   56,   55,   54,   53,   52,
       51,   50,   49,   48,   47,   46,   45,   44,   43,   42,
       41,   40,   39,   38,   37,   36,   35,   34,   33,   32,
       31,   30,   28,   27,   26,   24,   23,   22,   21,   18,
       17,   14,    8,    7,    3,    1,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667
    } ;

static ss_state_type ss_last_accepting_state;
static char *ss_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define ssmore() ssmore_used_but_not_detected
#define YY_MORE_ADJ 0
char *sstext;
# line 1 "sload.l"
# line 2 "sload.l"

#include <stdio.h>
#include <string.h>
#include "sound.h"

#define SEP	" ,\t"

char		*strtoke(), *sval();


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( sstext, ssleng, 1, ssout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( ss_current_buffer->ss_is_interactive ) \
		{ \
		int c = getc( ssin ); \
		result = c == EOF ? 0 : 1; \
		buf[0] = (char) c; \
		} \
	else if ( ((result = fread( buf, 1, max_size, ssin )) == 0) \
		  && ferror( ssin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "ssterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef ssterminate
#define ssterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) ss_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int sslex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after sstext and ssleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
	{
	register ss_state_type ss_current_state;
	register char *ss_cp, *ss_bp;
	register int ss_act;

# line 19 "sload.l"


	if ( ss_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! ss_start )
			ss_start = 1;	/* first start state */

		if ( ! ssin )
			ssin = stdin;

		if ( ! ssout )
			ssout = stdout;

		if ( ss_current_buffer )
			ss_init_buffer( ss_current_buffer, ssin );
		else
			ss_current_buffer =
				ss_create_buffer( ssin, YY_BUF_SIZE );

		ss_load_buffer_state();

		ss_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		ss_cp = ss_c_buf_p;

		/* Support of sstext. */
		*ss_cp = ss_hold_char;

		/* ss_bp points to the position in ss_ch_buf of the start of
		 * the current run.
		 */
		ss_bp = ss_cp;

		ss_current_state = ss_start;
		if ( ss_bp[-1] == '\n' )
			++ss_current_state;
ss_match:
		do
			{
			register YY_CHAR ss_c = ss_ec[YY_SC_TO_UI(*ss_cp)];
			if ( ss_accept[ss_current_state] )
				{
				ss_last_accepting_state = ss_current_state;
				ss_last_accepting_cpos = ss_cp;
				}
			while ( ss_chk[ss_base[ss_current_state] + ss_c] != ss_current_state )
				{
				ss_current_state = (int) ss_def[ss_current_state];
				if ( ss_current_state >= 668 )
					ss_c = ss_meta[(unsigned int) ss_c];
				}
			ss_current_state = ss_nxt[ss_base[ss_current_state] + (unsigned int) ss_c];
			++ss_cp;
			}
		while ( ss_base[ss_current_state] != 787 );

ss_find_action:
		ss_act = ss_accept[ss_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( ss_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*ss_cp = ss_hold_char;
			ss_cp = ss_last_accepting_cpos;
			ss_current_state = ss_last_accepting_state;
			goto ss_find_action;

case 1:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 20 "sload.l"
{ do_sound(LMG_SOUND); }
	YY_BREAK
case 2:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 21 "sload.l"
{ do_sound(MG_SOUND); }
	YY_BREAK
case 3:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 22 "sload.l"
{ do_sound(HMG_SOUND); }
	YY_BREAK
case 4:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 23 "sload.l"
{ do_sound(LCANNON_SOUND); }
	YY_BREAK
case 5:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 24 "sload.l"
{ do_sound(CANNON_SOUND); }
	YY_BREAK
case 6:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 25 "sload.l"
{ do_sound(HCANNON_SOUND); }
	YY_BREAK
case 7:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 26 "sload.l"
{ do_sound(LROCKET_SOUND); }
	YY_BREAK
case 8:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 27 "sload.l"
{ do_sound(ROCKET_SOUND); }
	YY_BREAK
case 9:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 28 "sload.l"
{ do_sound(HROCKET_SOUND); }
	YY_BREAK
case 10:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 29 "sload.l"
{ do_sound(ACID_SOUND); }
	YY_BREAK
case 11:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 30 "sload.l"
{ do_sound(FLAME_SOUND); }
	YY_BREAK
case 12:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 31 "sload.l"
{ do_sound(MINE_SOUND); }
	YY_BREAK
case 13:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 32 "sload.l"
{ do_sound(SEEKER_SOUND); }
	YY_BREAK
case 14:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 33 "sload.l"
{ do_sound(BLAST_SOUND); }
	YY_BREAK
case 15:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 34 "sload.l"
{ do_sound(LASER_SOUND); }
	YY_BREAK
case 16:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 35 "sload.l"
{ do_sound(SLICK_SOUND); }
	YY_BREAK
case 17:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 36 "sload.l"
{ do_sound(PROCKET_SOUND); }
	YY_BREAK
case 18:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 37 "sload.l"
{ do_sound(UMISSLE_SOUND); }
	YY_BREAK
case 19:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 38 "sload.l"
{ do_sound(NUKE_SOUND); }
	YY_BREAK
case 20:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 39 "sload.l"
{ do_sound(HARM_SOUND); }
	YY_BREAK
case 21:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 40 "sload.l"
{ do_sound(DISC_SOUND); }
	YY_BREAK
case 22:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 41 "sload.l"
{ do_sound(VEHICLE_HIT_WALL_SOUND); }
	YY_BREAK
case 23:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 42 "sload.l"
{ do_sound(VEHICLE_HIT_VEHICLE_SOUND); }
	YY_BREAK
case 24:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 43 "sload.l"
{ do_sound(TANK_EXPLOSION_SOUND); }
	YY_BREAK
case 25:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 44 "sload.l"
{ do_sound(GLEAM_EXPLOSION_SOUND); }
	YY_BREAK
case 26:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 45 "sload.l"
{ do_sound(DAM0_EXPLOSION_SOUND); }
	YY_BREAK
case 27:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 46 "sload.l"
{ do_sound(DAM1_EXPLOSION_SOUND); }
	YY_BREAK
case 28:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 47 "sload.l"
{ do_sound(DAM2_EXPLOSION_SOUND); }
	YY_BREAK
case 29:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 48 "sload.l"
{ do_sound(DAM3_EXPLOSION_SOUND); }
	YY_BREAK
case 30:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 49 "sload.l"
{ do_sound(DAM4_EXPLOSION_SOUND); }
	YY_BREAK
case 31:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 50 "sload.l"
{ do_sound(EXHAUST_EXPLOSION_SOUND); }
	YY_BREAK
case 32:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 51 "sload.l"
{ do_sound(ELECTRIC_EXPLOSION_SOUND); }
	YY_BREAK
case 33:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 52 "sload.l"
{ do_sound(NUKE_EXPLOSION_SOUND); }
	YY_BREAK
case 34:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 53 "sload.l"
{ do_sound(DAMAGE_EXPLOSION_SOUND); }
	YY_BREAK
case 35:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 54 "sload.l"
{ do_sound(START_SOUND); }
	YY_BREAK
case 36:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 55 "sload.l"
{ do_sound(END_SOUND); }
	YY_BREAK
case 37:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 56 "sload.l"
{ do_sound(SONAR_SOUND); }
	YY_BREAK
case 38:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 57 "sload.l"
{ do_sound(BLIP_SOUND); }
	YY_BREAK
case 39:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 58 "sload.l"
{ do_sound(DISC_NEW_OWNER_SOUND); }
	YY_BREAK
case 40:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 59 "sload.l"
{ do_sound(GOAL_SOUND); }
	YY_BREAK
case 41:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 60 "sload.l"
{ do_sound(RICOCHET_SOUND); }
	YY_BREAK
case 42:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 61 "sload.l"
{ do_sound(WEAPON_RELOADING_SOUND); }
	YY_BREAK
case 43:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 62 "sload.l"
{ do_sound(WEAPON_NO_AMMO_SOUND); }
	YY_BREAK
case 44:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 63 "sload.l"
{ do_sound(WEAPON_TOO_HOT_SOUND); }
	YY_BREAK
case 45:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 64 "sload.l"
{ do_sound(WEAPON_OFF_SOUND); }
	YY_BREAK
case 46:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 65 "sload.l"
{ do_sound(AMMO_WARNING_SOUND); }
	YY_BREAK
case 47:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 66 "sload.l"
{ do_sound(ARMOR_WARNING_SOUND); }
	YY_BREAK
case 48:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 67 "sload.l"
{ do_sound(HEAT_WARNING_SOUND); }
	YY_BREAK
case 49:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 68 "sload.l"
{ do_sound(FUEL_WARNING_SOUND); }
	YY_BREAK
case 50:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 69 "sload.l"
{ do_sound(AMMO_OK_SOUND); }
	YY_BREAK
case 51:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 70 "sload.l"
{ do_sound(ARMOR_OK_SOUND); }
	YY_BREAK
case 52:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 71 "sload.l"
{ do_sound(HEAT_OK_SOUND); }
	YY_BREAK
case 53:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 72 "sload.l"
{ do_sound(FUEL_OK_SOUND); }
	YY_BREAK
case 54:
*ss_cp = ss_hold_char; /* undo effects of setting up sstext */
ss_c_buf_p = ss_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up sstext again */
YY_USER_ACTION
# line 73 "sload.l"
{ do_sound(KILLER_SOUND); }
	YY_BREAK
case 55:
YY_USER_ACTION
# line 74 "sload.l"
{ /* nothing */ }
	YY_BREAK
case 56:
YY_USER_ACTION
# line 75 "sload.l"
{
					fprintf(stderr, "Bad sound file entry '%s'\n", sstext);
					exit(2);
				}
	YY_BREAK
case 57:
YY_USER_ACTION
# line 80 "sload.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	ssterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int ss_amount_of_matched_text = ss_cp - sstext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*ss_cp = ss_hold_char;

		if ( ss_current_buffer->ss_input_file != ssin )
			{
			/* This can happen if we scan a file, yywrap() returns
			 * 1, and then later the user points ssin at a new
			 * file to resume scanning.  We have to assure
			 * consistency between ss_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input file.
			 */
			ss_current_buffer->ss_input_file = ssin;
			ss_n_chars = ss_current_buffer->ss_n_chars;
			}

		/* Note that here we test for ss_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since ss_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( ss_c_buf_p <= &ss_current_buffer->ss_ch_buf[ss_n_chars] )
			{ /* This was really a NUL. */
			ss_state_type ss_next_state;

			ss_c_buf_p = sstext_ptr + ss_amount_of_matched_text;

			ss_current_state = ss_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * ss_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			ss_next_state = ss_try_NUL_trans( ss_current_state );

			ss_bp = sstext_ptr + YY_MORE_ADJ;

			if ( ss_next_state )
				{
				/* Consume the NUL. */
				ss_cp = ++ss_c_buf_p;
				ss_current_state = ss_next_state;
				goto ss_match;
				}

			else
				{
				goto ss_find_action;
				}
			}

		else switch ( ss_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				ss_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * ss_get_next_buffer() to have set up
					 * sstext, we can now set up
					 * ss_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					ss_c_buf_p = sstext_ptr + YY_MORE_ADJ;

					ss_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! ss_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				ss_c_buf_p =
					sstext_ptr + ss_amount_of_matched_text;

				ss_current_state = ss_get_previous_state();

				ss_cp = ss_c_buf_p;
				ss_bp = sstext_ptr + YY_MORE_ADJ;
				goto ss_match;

			case EOB_ACT_LAST_MATCH:
				ss_c_buf_p =
				&ss_current_buffer->ss_ch_buf[ss_n_chars];

				ss_current_state = ss_get_previous_state();

				ss_cp = ss_c_buf_p;
				ss_bp = sstext_ptr + YY_MORE_ADJ;
				goto ss_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of sslex */


/* ss_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int ss_get_next_buffer()
	{
	register char *dest = ss_current_buffer->ss_ch_buf;
	register char *source = sstext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( ss_c_buf_p > &ss_current_buffer->ss_ch_buf[ss_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( ss_current_buffer->ss_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( ss_c_buf_p - sstext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = ss_c_buf_p - sstext_ptr;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( ss_current_buffer->ss_eof_status != EOF_NOT_SEEN )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		ss_n_chars = 0;

	else
		{
		int num_to_read =
			ss_current_buffer->ss_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = ss_current_buffer;

			int ss_c_buf_p_offset = ss_c_buf_p - b->ss_ch_buf;

			b->ss_buf_size *= 2;
			b->ss_ch_buf = (char *)
				ss_flex_realloc( (void *) b->ss_ch_buf,
						 b->ss_buf_size );

			if ( ! b->ss_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			ss_c_buf_p = &b->ss_ch_buf[ss_c_buf_p_offset];

			num_to_read = ss_current_buffer->ss_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&ss_current_buffer->ss_ch_buf[number_to_move]),
			ss_n_chars, num_to_read );
		}

	if ( ss_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ssrestart( ssin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			ss_current_buffer->ss_eof_status = EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	ss_n_chars += number_to_move;
	ss_current_buffer->ss_ch_buf[ss_n_chars] = YY_END_OF_BUFFER_CHAR;
	ss_current_buffer->ss_ch_buf[ss_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* sstext begins at the second character in ss_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * ss_get_previous_state() will have with '^' rules active.
	 */

	sstext_ptr = &ss_current_buffer->ss_ch_buf[1];

	return ret_val;
	}


/* ss_get_previous_state - get the state just before the EOB char was reached */

static ss_state_type ss_get_previous_state()
	{
	register ss_state_type ss_current_state;
	register char *ss_cp;

	register char *ss_bp = sstext_ptr;

	ss_current_state = ss_start;
	if ( ss_bp[-1] == '\n' )
		++ss_current_state;

	for ( ss_cp = sstext_ptr + YY_MORE_ADJ; ss_cp < ss_c_buf_p; ++ss_cp )
		{
		register YY_CHAR ss_c = (*ss_cp ? ss_ec[YY_SC_TO_UI(*ss_cp)] : 1);
		if ( ss_accept[ss_current_state] )
			{
			ss_last_accepting_state = ss_current_state;
			ss_last_accepting_cpos = ss_cp;
			}
		while ( ss_chk[ss_base[ss_current_state] + ss_c] != ss_current_state )
			{
			ss_current_state = (int) ss_def[ss_current_state];
			if ( ss_current_state >= 668 )
				ss_c = ss_meta[(unsigned int) ss_c];
			}
		ss_current_state = ss_nxt[ss_base[ss_current_state] + (unsigned int) ss_c];
		}

	return ss_current_state;
	}


/* ss_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = ss_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static ss_state_type ss_try_NUL_trans( ss_state_type ss_current_state )
#else
static ss_state_type ss_try_NUL_trans( ss_current_state )
ss_state_type ss_current_state;
#endif
	{
	register int ss_is_jam;
	register char *ss_cp = ss_c_buf_p;

	register YY_CHAR ss_c = 1;
	if ( ss_accept[ss_current_state] )
		{
		ss_last_accepting_state = ss_current_state;
		ss_last_accepting_cpos = ss_cp;
		}
	while ( ss_chk[ss_base[ss_current_state] + ss_c] != ss_current_state )
		{
		ss_current_state = (int) ss_def[ss_current_state];
		if ( ss_current_state >= 668 )
			ss_c = ss_meta[(unsigned int) ss_c];
		}
	ss_current_state = ss_nxt[ss_base[ss_current_state] + (unsigned int) ss_c];
	ss_is_jam = (ss_current_state == 667);

	return ss_is_jam ? 0 : ss_current_state;
	}


#ifdef YY_USE_PROTOS
static void ssunput( int c, register char *ss_bp )
#else
static void ssunput( c, ss_bp )
int c;
register char *ss_bp;
#endif
	{
	register char *ss_cp = ss_c_buf_p;

	/* undo effects of setting up sstext */
	*ss_cp = ss_hold_char;

	if ( ss_cp < ss_current_buffer->ss_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = ss_n_chars + 2;
		register char *dest = &ss_current_buffer->ss_ch_buf[
					ss_current_buffer->ss_buf_size + 2];
		register char *source =
				&ss_current_buffer->ss_ch_buf[number_to_move];

		while ( source > ss_current_buffer->ss_ch_buf )
			*--dest = *--source;

		ss_cp += dest - source;
		ss_bp += dest - source;
		ss_n_chars = ss_current_buffer->ss_buf_size;

		if ( ss_cp < ss_current_buffer->ss_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( ss_cp > ss_bp && ss_cp[-1] == '\n' )
		ss_cp[-2] = '\n';

	*--ss_cp = (char) c;


	/* Note: the formal parameter *must* be called "ss_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up sstext again */
	}


#ifdef __cplusplus
static int ssinput()
#else
static int input()
#endif
	{
	int c;

	*ss_c_buf_p = ss_hold_char;

	if ( *ss_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* ss_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( ss_c_buf_p < &ss_current_buffer->ss_ch_buf[ss_n_chars] )
			/* This was really a NUL. */
			*ss_c_buf_p = '\0';

		else
			{ /* need more input */
			sstext_ptr = ss_c_buf_p;
			++ss_c_buf_p;

			switch ( ss_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						ss_c_buf_p =
						sstext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return ssinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					ss_c_buf_p = sstext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in ssinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *ss_c_buf_p;
	*ss_c_buf_p = '\0';	/* preserve sstext */
	ss_hold_char = *++ss_c_buf_p;

	return c;
	}


#ifdef YY_USE_PROTOS
void ssrestart( FILE *input_file )
#else
void ssrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! ss_current_buffer )
		ss_current_buffer = ss_create_buffer( ssin, YY_BUF_SIZE );

	ss_init_buffer( ss_current_buffer, input_file );
	ss_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void ss_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void ss_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( ss_current_buffer == new_buffer )
		return;

	if ( ss_current_buffer )
		{
		/* Flush out information for old buffer. */
		*ss_c_buf_p = ss_hold_char;
		ss_current_buffer->ss_buf_pos = ss_c_buf_p;
		ss_current_buffer->ss_n_chars = ss_n_chars;
		}

	ss_current_buffer = new_buffer;
	ss_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	ss_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void ss_load_buffer_state( void )
#else
void ss_load_buffer_state()
#endif
	{
	ss_n_chars = ss_current_buffer->ss_n_chars;
	sstext_ptr = ss_c_buf_p = ss_current_buffer->ss_buf_pos;
	ssin = ss_current_buffer->ss_input_file;
	ss_hold_char = *ss_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE ss_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE ss_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) ss_flex_alloc( sizeof( struct ss_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ss_create_buffer()" );

	b->ss_buf_size = size;

	/* ss_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->ss_ch_buf = (char *) ss_flex_alloc( b->ss_buf_size + 2 );

	if ( ! b->ss_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ss_create_buffer()" );

	ss_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void ss_delete_buffer( YY_BUFFER_STATE b )
#else
void ss_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( b == ss_current_buffer )
		ss_current_buffer = (YY_BUFFER_STATE) 0;

	ss_flex_free( (void *) b->ss_ch_buf );
	ss_flex_free( (void *) b );
	}


#ifdef YY_USE_PROTOS
void ss_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void ss_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
	{
	b->ss_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->ss_ch_buf[0] = '\n';
	b->ss_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->ss_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->ss_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->ss_buf_pos = &b->ss_ch_buf[1];

	b->ss_is_interactive = file ? isatty( fileno(file) ) : 0;

	b->ss_fill_buffer = 1;

	b->ss_eof_status = EOF_NOT_SEEN;
	}


#ifdef YY_USE_PROTOS
static void ss_push_state( int new_state )
#else
static void ss_push_state( new_state )
int new_state;
#endif
	{
	if ( ss_start_stack_ptr >= ss_start_stack_depth )
		{
		int new_size;

		ss_start_stack_depth += YY_START_STACK_INCR;
		new_size = ss_start_stack_depth * sizeof( int );

		if ( ! ss_start_stack )
			ss_start_stack = (int *) ss_flex_alloc( new_size );

		else
			ss_start_stack = (int *) ss_flex_realloc(
					(void *) ss_start_stack, new_size );

		if ( ! ss_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	ss_start_stack[ss_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}


static void ss_pop_state()
	{
	if ( --ss_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(ss_start_stack[ss_start_stack_ptr]);
	}


static int ss_top_state()
	{
	return ss_start_stack[ss_start_stack_ptr - 1];
	}


#ifdef YY_USE_PROTOS
static void ss_fatal_error( const char msg[] )
#else
static void ss_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( 1 );
	}



/* Redefine ssless() so it works in section 3 code. */

#undef ssless
#define ssless(n) \
	do \
		{ \
		/* Undo effects of setting up sstext. */ \
		sstext[ssleng] = ss_hold_char; \
		ss_c_buf_p = sstext + n - YY_MORE_ADJ; \
		ss_hold_char = *ss_c_buf_p; \
		*ss_c_buf_p = '\0'; \
		ssleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef sstext_ptr
#ifdef YY_USE_PROTOS
static void ss_flex_strcpy( char *s1, const char *s2 )
#else
static void ss_flex_strcpy( s1, s2 )
char *s1;
const char *s2;
#endif
	{
	while ( (*(s1++) = *(s2++)) )
		;
	}
#endif


#ifdef YY_USE_PROTOS
static void *ss_flex_alloc( unsigned int size )
#else
static void *ss_flex_alloc( size )
unsigned int size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *ss_flex_realloc( void *ptr, unsigned int size )
#else
static void *ss_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void ss_flex_free( void *ptr )
#else
static void ss_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
# line 80 "sload.l"


int	load_sounds(filename)
char	*filename;
{
	FILE	*fp;

	fp = fopen(filename, "r");
	if (fp == NULL)
	{
		fprintf(stderr, "Cannot read sound settings file '%s'\n", filename);
		return 0;
	}

	ssin = fp;
	sslex();
	fclose(fp);

	return 1;
}

do_sound(index)
int	index;
{
	char	*p, *name;
	int	volume;

	p = sval();
	name = strtoke(p, SEP);
	volume = atoi(strtoke(NULL, SEP));

	sound_insert(index, name, volume);
}

char	*sval()
{
        char *cp;

	for(cp = sstext; *cp != ':'; cp++) ;
	cp++;
	while(*cp == ' ' || *cp == '\t') cp++;

	return cp;
}
